
013.ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac0  08003ac0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00004ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ac8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003b30  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003b30  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ced  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ade  00000000  00000000  0000ed85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068a  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017679  00000000  00000000  0001178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7b9  00000000  00000000  00028e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a4b  00000000  00000000  000335bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000c604c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c8a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a44 	.word	0x08003a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003a44 	.word	0x08003a44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d106      	bne.n	80005c8 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 80005ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4907      	ldr	r1, [pc, #28]	@ (80005e0 <__io_putchar+0x34>)
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <__io_putchar+0x38>)
 80005c4:	f001 ff54 	bl	8002470 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ce:	2201      	movs	r2, #1
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <__io_putchar+0x38>)
 80005d2:	f001 ff4d 	bl	8002470 <HAL_UART_Transmit>
	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08003a5c 	.word	0x08003a5c
 80005e4:	200000cc 	.word	0x200000cc

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb10 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f820 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f904 	bl	8000800 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f8:	f000 f886 	bl	8000708 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f8d6 	bl	80007ac <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <main+0x40>)
 8000602:	f000 fbdf 	bl	8000dc4 <HAL_ADC_Start_IT>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x28>
  {
	  Error_Handler();
 800060c:	f000 f924 	bl	8000858 <Error_Handler>
  }
  while (1)
  {
	  printf("TEMP=%4d\n", uwADCxConvertedValue);
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <main+0x44>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <main+0x48>)
 8000618:	f002 fba8 	bl	8002d6c <iprintf>
	  HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f000 fb69 	bl	8000cf4 <HAL_Delay>
	  printf("TEMP=%4d\n", uwADCxConvertedValue);
 8000622:	bf00      	nop
 8000624:	e7f4      	b.n	8000610 <main+0x28>
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084
 800062c:	20000114 	.word	0x20000114
 8000630:	08003a60 	.word	0x08003a60

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fbe7 	bl	8002e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <SystemClock_Config+0xd0>)
 8000682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006ac:	2340      	movs	r3, #64	@ 0x40
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa2f 	bl	8001b20 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 f8c6 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fc91 	bl	8002010 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f8b0 	bl	8000858 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_ADC1_Init+0xa0>)
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800076a:	f000 fae7 	bl	8000d3c <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 f870 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000778:	2304      	movs	r3, #4
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000780:	2307      	movs	r3, #7
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_ADC1_Init+0x98>)
 800078a:	f000 fd0b 	bl	80011a4 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f860 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000084 	.word	0x20000084
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fdf4 	bl	80023d0 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f833 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_GPIO_Init+0x30>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <MX_GPIO_Init+0x30>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_GPIO_Init+0x30>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uwADCxConvertedValue = HAL_ADC_GetValue(AdcHandle);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 fc8f 	bl	8001160 <HAL_ADC_GetValue>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <HAL_ADC_ConvCpltCallback+0x20>)
 8000848:	801a      	strh	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000114 	.word	0x20000114

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <HAL_ADC_MspInit+0x8c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12f      	bne.n	8000936 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a19      	ldr	r2, [pc, #100]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_ADC_MspInit+0x90>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090e:	2310      	movs	r3, #16
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <HAL_ADC_MspInit+0x94>)
 8000922:	f000 ff79 	bl	8001818 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2012      	movs	r0, #18
 800092c:	f000 ff3d 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000930:	2012      	movs	r0, #18
 8000932:	f000 ff56 	bl	80017e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40012000 	.word	0x40012000
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c2:	f000 ff29 	bl	8001818 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	@ 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f93f 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <ADC_IRQHandler+0x10>)
 8000a42:	f000 fa7d 	bl	8000f40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000084 	.word	0x20000084

08000a50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd81 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
  }
  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f002 f9aa 	bl	8002eb4 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20018000 	.word	0x20018000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000118 	.word	0x20000118
 8000b94:	20000270 	.word	0x20000270

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 f969 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcfb 	bl	80005e8 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c00:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 8000c04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c08:	2000026c 	.word	0x2000026c

08000c0c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <DMA1_Stream0_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 fdab 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe0e 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fdc3 	bl	80017fe <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 fd8b 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	2000011c 	.word	0x2000011c

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000011c 	.word	0x2000011c

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e033      	b.n	8000dba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d109      	bne.n	8000d6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fdaa 	bl	80008b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d118      	bne.n	8000dac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d82:	f023 0302 	bic.w	r3, r3, #2
 8000d86:	f043 0202 	orr.w	r2, r3, #2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fb2a 	bl	80013e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000daa:	e001      	b.n	8000db0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Start_IT+0x1a>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e0a1      	b.n	8000f22 <HAL_ADC_Start_IT+0x15e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d018      	beq.n	8000e26 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e04:	4b4a      	ldr	r3, [pc, #296]	@ (8000f30 <HAL_ADC_Start_IT+0x16c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a4a      	ldr	r2, [pc, #296]	@ (8000f34 <HAL_ADC_Start_IT+0x170>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9a      	lsrs	r2, r3, #18
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d169      	bne.n	8000f08 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e72:	d106      	bne.n	8000e82 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e78:	f023 0206 	bic.w	r2, r3, #6
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <HAL_ADC_Start_IT+0x174>)
 8000e92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d129      	bne.n	8000f20 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	e020      	b.n	8000f20 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <HAL_ADC_Start_IT+0x178>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d11b      	bne.n	8000f20 <HAL_ADC_Start_IT+0x15c>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d114      	bne.n	8000f20 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	e00b      	b.n	8000f20 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f043 0210 	orr.w	r2, r3, #16
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	40012300 	.word	0x40012300
 8000f3c:	40012000 	.word	0x40012000

08000f40 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d049      	beq.n	800100a <HAL_ADC_IRQHandler+0xca>
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d046      	beq.n	800100a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d12b      	bne.n	8000ffa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d127      	bne.n	8000ffa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d119      	bne.n	8000ffa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0220 	bic.w	r2, r2, #32
 8000fd4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fc1a 	bl	8000834 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f06f 0212 	mvn.w	r2, #18
 8001008:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001018:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d057      	beq.n	80010d0 <HAL_ADC_IRQHandler+0x190>
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d054      	beq.n	80010d0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d139      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001052:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001064:	2b00      	cmp	r3, #0
 8001066:	d12b      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001072:	2b00      	cmp	r3, #0
 8001074:	d124      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11d      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001088:	2b00      	cmp	r3, #0
 800108a:	d119      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800109a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fa8d 	bl	80015e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f06f 020c 	mvn.w	r2, #12
 80010ce:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010de:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d017      	beq.n	8001116 <HAL_ADC_IRQHandler+0x1d6>
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d014      	beq.n	8001116 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10d      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f837 	bl	800117a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0201 	mvn.w	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001124:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <HAL_ADC_IRQHandler+0x218>
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d012      	beq.n	8001158 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f043 0202 	orr.w	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f06f 0220 	mvn.w	r2, #32
 8001146:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f820 	bl	800118e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f06f 0220 	mvn.w	r2, #32
 8001156:	601a      	str	r2, [r3, #0]
  }
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x1c>
 80011bc:	2302      	movs	r3, #2
 80011be:	e105      	b.n	80013cc <HAL_ADC_ConfigChannel+0x228>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d925      	bls.n	800121c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68d9      	ldr	r1, [r3, #12]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	3b1e      	subs	r3, #30
 80011e6:	2207      	movs	r2, #7
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43da      	mvns	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	400a      	ands	r2, r1
 80011f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68d9      	ldr	r1, [r3, #12]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	4603      	mov	r3, r0
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4403      	add	r3, r0
 800120e:	3b1e      	subs	r3, #30
 8001210:	409a      	lsls	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	e022      	b.n	8001262 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6919      	ldr	r1, [r3, #16]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	2207      	movs	r2, #7
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6919      	ldr	r1, [r3, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	4603      	mov	r3, r0
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4403      	add	r3, r0
 8001258:	409a      	lsls	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b06      	cmp	r3, #6
 8001268:	d824      	bhi.n	80012b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b05      	subs	r3, #5
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	400a      	ands	r2, r1
 800128a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b05      	subs	r3, #5
 80012a6:	fa00 f203 	lsl.w	r2, r0, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b2:	e04c      	b.n	800134e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d824      	bhi.n	8001306 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b23      	subs	r3, #35	@ 0x23
 80012ce:	221f      	movs	r2, #31
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43da      	mvns	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	400a      	ands	r2, r1
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b23      	subs	r3, #35	@ 0x23
 80012f8:	fa00 f203 	lsl.w	r2, r0, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	631a      	str	r2, [r3, #48]	@ 0x30
 8001304:	e023      	b.n	800134e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b41      	subs	r3, #65	@ 0x41
 8001318:	221f      	movs	r2, #31
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	400a      	ands	r2, r1
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	3b41      	subs	r3, #65	@ 0x41
 8001342:	fa00 f203 	lsl.w	r2, r0, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_ADC_ConfigChannel+0x234>)
 8001350:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <HAL_ADC_ConfigChannel+0x238>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d109      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1cc>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d105      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <HAL_ADC_ConfigChannel+0x238>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d123      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x21e>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b10      	cmp	r3, #16
 8001380:	d003      	beq.n	800138a <HAL_ADC_ConfigChannel+0x1e6>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b11      	cmp	r3, #17
 8001388:	d11b      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_ADC_ConfigChannel+0x23c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <HAL_ADC_ConfigChannel+0x240>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9a      	lsrs	r2, r3, #18
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40012300 	.word	0x40012300
 80013dc:	40012000 	.word	0x40012000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f0:	4b79      	ldr	r3, [pc, #484]	@ (80015d8 <ADC_Init+0x1f0>)
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800141c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	021a      	lsls	r2, r3, #8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147a:	4a58      	ldr	r2, [pc, #352]	@ (80015dc <ADC_Init+0x1f4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d022      	beq.n	80014c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800148e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	e00f      	b.n	80014e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0202 	bic.w	r2, r2, #2
 80014f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e1b      	ldrb	r3, [r3, #24]
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01b      	beq.n	800154c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001522:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001532:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	3b01      	subs	r3, #1
 8001540:	035a      	lsls	r2, r3, #13
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	e007      	b.n	800155c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	3b01      	subs	r3, #1
 8001578:	051a      	lsls	r2, r3, #20
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800159e:	025a      	lsls	r2, r3, #9
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	029a      	lsls	r2, r3, #10
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40012300 	.word	0x40012300
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	@ (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff3e 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff31 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	@ 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e159      	b.n	8001ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8148 	bne.w	8001ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	2b02      	cmp	r3, #2
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a2 	beq.w	8001ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b57      	ldr	r3, [pc, #348]	@ (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a56      	ldr	r2, [pc, #344]	@ (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b54      	ldr	r3, [pc, #336]	@ (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ba:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_GPIO_Init+0x2ec>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a49      	ldr	r2, [pc, #292]	@ (8001b08 <HAL_GPIO_Init+0x2f0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x202>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a48      	ldr	r2, [pc, #288]	@ (8001b0c <HAL_GPIO_Init+0x2f4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x1fe>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a47      	ldr	r2, [pc, #284]	@ (8001b10 <HAL_GPIO_Init+0x2f8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x1fa>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a46      	ldr	r2, [pc, #280]	@ (8001b14 <HAL_GPIO_Init+0x2fc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x1f6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a45      	ldr	r2, [pc, #276]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x1f2>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e008      	b.n	8001a1c <HAL_GPIO_Init+0x204>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x204>
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e004      	b.n	8001a1c <HAL_GPIO_Init+0x204>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_Init+0x204>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x204>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f002 0203 	and.w	r2, r2, #3
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4093      	lsls	r3, r2
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a2c:	4935      	ldr	r1, [pc, #212]	@ (8001b04 <HAL_GPIO_Init+0x2ec>)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3a:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a88:	4a24      	ldr	r2, [pc, #144]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001adc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b1c <HAL_GPIO_Init+0x304>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	f67f aea2 	bls.w	8001834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3724      	adds	r7, #36	@ 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40013800 	.word	0x40013800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e267      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d075      	beq.n	8001c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b3e:	4b88      	ldr	r3, [pc, #544]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4b85      	ldr	r3, [pc, #532]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b82      	ldr	r3, [pc, #520]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4b7e      	ldr	r3, [pc, #504]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x108>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d157      	bne.n	8001c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e242      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x74>
 8001b86:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b70      	ldr	r3, [pc, #448]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6d      	ldr	r3, [pc, #436]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6c      	ldr	r2, [pc, #432]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	4b69      	ldr	r3, [pc, #420]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a68      	ldr	r2, [pc, #416]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b66      	ldr	r3, [pc, #408]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a65      	ldr	r2, [pc, #404]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f880 	bl	8000cdc <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff f87c 	bl	8000cdc <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e207      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f86c 	bl	8000cdc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f868 	bl	8000cdc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1f3      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0xe8>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c36:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b44      	ldr	r3, [pc, #272]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1c7      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b3b      	ldr	r3, [pc, #236]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4937      	ldr	r1, [pc, #220]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <HAL_RCC_OscConfig+0x244>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f821 	bl	8000cdc <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f81d 	bl	8000cdc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1a8      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4925      	ldr	r1, [pc, #148]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_RCC_OscConfig+0x244>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f800 	bl	8000cdc <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7fe fffc 	bl	8000cdc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e187      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d036      	beq.n	8001d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x248>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7fe ffe0 	bl	8000cdc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7fe ffdc 	bl	8000cdc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e167      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x200>
 8001d3e:	e01b      	b.n	8001d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RCC_OscConfig+0x248>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7fe ffc9 	bl	8000cdc <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	e00e      	b.n	8001d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7fe ffc5 	bl	8000cdc <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d907      	bls.n	8001d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e150      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470000 	.word	0x42470000
 8001d68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ea      	bne.n	8001d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8097 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b77      	ldr	r3, [pc, #476]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc2:	4b74      	ldr	r3, [pc, #464]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a73      	ldr	r2, [pc, #460]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7fe ff85 	bl	8000cdc <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7fe ff81 	bl	8000cdc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e10c      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x2ea>
 8001dfc:	4b64      	ldr	r3, [pc, #400]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a63      	ldr	r2, [pc, #396]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x324>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x30c>
 8001e12:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	4a5e      	ldr	r2, [pc, #376]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a5b      	ldr	r2, [pc, #364]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x324>
 8001e2c:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	4a57      	ldr	r2, [pc, #348]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e38:	4b55      	ldr	r3, [pc, #340]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a54      	ldr	r2, [pc, #336]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ff46 	bl	8000cdc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe ff42 	bl	8000cdc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0cb      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ee      	beq.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7fe ff30 	bl	8000cdc <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7fe ff2c 	bl	8000cdc <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0b5      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e96:	4b3e      	ldr	r3, [pc, #248]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	4a38      	ldr	r2, [pc, #224]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a1 	beq.w	8002000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d05c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d141      	bne.n	8001f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff00 	bl	8000cdc <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fefc 	bl	8000cdc <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e087      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	491b      	ldr	r1, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fed5 	bl	8000cdc <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe fed1 	bl	8000cdc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e05c      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x416>
 8001f54:	e054      	b.n	8002000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe febe 	bl	8000cdc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe feba 	bl	8000cdc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e045      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
 8001f82:	e03d      	b.n	8002000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e038      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000
 8001f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x4ec>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d028      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d121      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11a      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d111      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cc      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b68      	ldr	r3, [pc, #416]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90c      	bls.n	800204c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b65      	ldr	r3, [pc, #404]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a58      	ldr	r2, [pc, #352]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800206e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d044      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b3f      	ldr	r3, [pc, #252]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e067      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4934      	ldr	r1, [pc, #208]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7fe fdec 	bl	8000cdc <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7fe fde8 	bl	8000cdc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d20c      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	@ (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fd4c 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08003a6c 	.word	0x08003a6c
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e0:	b090      	sub	sp, #64	@ 0x40
 80021e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f4:	4b59      	ldr	r3, [pc, #356]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d00d      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002200:	2b08      	cmp	r3, #8
 8002202:	f200 80a1 	bhi.w	8002348 <HAL_RCC_GetSysClockFreq+0x16c>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 800220a:	2b04      	cmp	r3, #4
 800220c:	d003      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x3a>
 800220e:	e09b      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x184>)
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002214:	e09b      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002216:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800221a:	e098      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221c:	4b4f      	ldr	r3, [pc, #316]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002224:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002226:	4b4d      	ldr	r3, [pc, #308]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	2200      	movs	r2, #0
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	627a      	str	r2, [r7, #36]	@ 0x24
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002244:	2100      	movs	r1, #0
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002248:	fb03 f201 	mul.w	r2, r3, r1
 800224c:	2300      	movs	r3, #0
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	4413      	add	r3, r2
 8002254:	4a43      	ldr	r2, [pc, #268]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x188>)
 8002256:	fba0 1202 	umull	r1, r2, r0, r2
 800225a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800225c:	460a      	mov	r2, r1
 800225e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002262:	4413      	add	r3, r2
 8002264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	2200      	movs	r2, #0
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	61fa      	str	r2, [r7, #28]
 800226e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002276:	f7fe f803 	bl	8000280 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4613      	mov	r3, r2
 8002280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002282:	e053      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	617a      	str	r2, [r7, #20]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002296:	f04f 0b00 	mov.w	fp, #0
 800229a:	4652      	mov	r2, sl
 800229c:	465b      	mov	r3, fp
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	0159      	lsls	r1, r3, #5
 80022a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ac:	0150      	lsls	r0, r2, #5
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	ebb2 080a 	subs.w	r8, r2, sl
 80022b6:	eb63 090b 	sbc.w	r9, r3, fp
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ce:	ebb2 0408 	subs.w	r4, r2, r8
 80022d2:	eb63 0509 	sbc.w	r5, r3, r9
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	00eb      	lsls	r3, r5, #3
 80022e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e4:	00e2      	lsls	r2, r4, #3
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	eb14 030a 	adds.w	r3, r4, sl
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	eb45 030b 	adc.w	r3, r5, fp
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002316:	2200      	movs	r2, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002320:	f7fd ffae 	bl	8000280 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_GetSysClockFreq+0x180>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800233c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x184>)
 800234a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800234c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002350:	4618      	mov	r0, r3
 8002352:	3740      	adds	r7, #64	@ 0x40
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	017d7840 	.word	0x017d7840

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_RCC_GetHCLKFreq+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002384:	f7ff fff0 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08003a7c 	.word	0x08003a7c

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ac:	f7ff ffdc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	@ (80023cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08003a7c 	.word	0x08003a7c

080023d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e042      	b.n	8002468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe faa8 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	@ 0x24
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f973 	bl	8002700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	d175      	bne.n	800257c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Transmit+0x2c>
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e06e      	b.n	800257e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	@ 0x21
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fc15 	bl	8000cdc <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x6c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e4:	e02e      	b.n	8002544 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f848 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e03a      	b.n	800257e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1cb      	bne.n	80024e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f814 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	e03b      	b.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d037      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a0:	f7fe fb9c 	bl	8000cdc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	6a3a      	ldr	r2, [r7, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d302      	bcc.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e03a      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b80      	cmp	r3, #128	@ 0x80
 80025cc:	d020      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b40      	cmp	r3, #64	@ 0x40
 80025d2:	d01d      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d116      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f81d 	bl	8002638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2208      	movs	r2, #8
 8002602:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00f      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	429a      	cmp	r2, r3
 800262c:	d0b4      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002638:	b480      	push	{r7}
 800263a:	b095      	sub	sp, #84	@ 0x54
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002660:	643a      	str	r2, [r7, #64]	@ 0x40
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	61fb      	str	r3, [r7, #28]
   return(result);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800269a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	e853 3f00 	ldrex	r3, [r3]
 80026be:	60bb      	str	r3, [r7, #8]
   return(result);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f023 0310 	bic.w	r3, r3, #16
 80026c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026d0:	61ba      	str	r2, [r7, #24]
 80026d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	613b      	str	r3, [r7, #16]
   return(result);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e5      	bne.n	80026b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026f2:	bf00      	nop
 80026f4:	3754      	adds	r7, #84	@ 0x54
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002704:	b0c0      	sub	sp, #256	@ 0x100
 8002706:	af00      	add	r7, sp, #0
 8002708:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	ea40 0301 	orr.w	r3, r0, r1
 8002728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002758:	f021 010c 	bic.w	r1, r1, #12
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002766:	430b      	orrs	r3, r1
 8002768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	6999      	ldr	r1, [r3, #24]
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	ea40 0301 	orr.w	r3, r0, r1
 8002786:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b8f      	ldr	r3, [pc, #572]	@ (80029cc <UART_SetConfig+0x2cc>)
 8002790:	429a      	cmp	r2, r3
 8002792:	d005      	beq.n	80027a0 <UART_SetConfig+0xa0>
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b8d      	ldr	r3, [pc, #564]	@ (80029d0 <UART_SetConfig+0x2d0>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d104      	bne.n	80027aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027a0:	f7ff fe02 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 80027a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027a8:	e003      	b.n	80027b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027aa:	f7ff fde9 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80027ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027bc:	f040 810c 	bne.w	80029d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027d2:	4622      	mov	r2, r4
 80027d4:	462b      	mov	r3, r5
 80027d6:	1891      	adds	r1, r2, r2
 80027d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027da:	415b      	adcs	r3, r3
 80027dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027e2:	4621      	mov	r1, r4
 80027e4:	eb12 0801 	adds.w	r8, r2, r1
 80027e8:	4629      	mov	r1, r5
 80027ea:	eb43 0901 	adc.w	r9, r3, r1
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002802:	4690      	mov	r8, r2
 8002804:	4699      	mov	r9, r3
 8002806:	4623      	mov	r3, r4
 8002808:	eb18 0303 	adds.w	r3, r8, r3
 800280c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002810:	462b      	mov	r3, r5
 8002812:	eb49 0303 	adc.w	r3, r9, r3
 8002816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002826:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800282a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800282e:	460b      	mov	r3, r1
 8002830:	18db      	adds	r3, r3, r3
 8002832:	653b      	str	r3, [r7, #80]	@ 0x50
 8002834:	4613      	mov	r3, r2
 8002836:	eb42 0303 	adc.w	r3, r2, r3
 800283a:	657b      	str	r3, [r7, #84]	@ 0x54
 800283c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002840:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002844:	f7fd fd1c 	bl	8000280 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <UART_SetConfig+0x2d4>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	011c      	lsls	r4, r3, #4
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002860:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002864:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002870:	415b      	adcs	r3, r3
 8002872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002874:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002878:	4641      	mov	r1, r8
 800287a:	eb12 0a01 	adds.w	sl, r2, r1
 800287e:	4649      	mov	r1, r9
 8002880:	eb43 0b01 	adc.w	fp, r3, r1
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002890:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002898:	4692      	mov	sl, r2
 800289a:	469b      	mov	fp, r3
 800289c:	4643      	mov	r3, r8
 800289e:	eb1a 0303 	adds.w	r3, sl, r3
 80028a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028a6:	464b      	mov	r3, r9
 80028a8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028c4:	460b      	mov	r3, r1
 80028c6:	18db      	adds	r3, r3, r3
 80028c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ca:	4613      	mov	r3, r2
 80028cc:	eb42 0303 	adc.w	r3, r2, r3
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028da:	f7fd fcd1 	bl	8000280 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80028e6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2264      	movs	r2, #100	@ 0x64
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028fa:	4b36      	ldr	r3, [pc, #216]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80028fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002908:	441c      	add	r4, r3
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002914:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002918:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002924:	415b      	adcs	r3, r3
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002928:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800292c:	4641      	mov	r1, r8
 800292e:	1851      	adds	r1, r2, r1
 8002930:	6339      	str	r1, [r7, #48]	@ 0x30
 8002932:	4649      	mov	r1, r9
 8002934:	414b      	adcs	r3, r1
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002944:	4659      	mov	r1, fp
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4651      	mov	r1, sl
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4642      	mov	r2, r8
 800295a:	189b      	adds	r3, r3, r2
 800295c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002960:	464b      	mov	r3, r9
 8002962:	460a      	mov	r2, r1
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002978:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800297c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002980:	460b      	mov	r3, r1
 8002982:	18db      	adds	r3, r3, r3
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002986:	4613      	mov	r3, r2
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800298e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002992:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002996:	f7fd fc73 	bl	8000280 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80029a0:	fba3 1302 	umull	r1, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2164      	movs	r1, #100	@ 0x64
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3332      	adds	r3, #50	@ 0x32
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4422      	add	r2, r4
 80029c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029c8:	e106      	b.n	8002bd8 <UART_SetConfig+0x4d8>
 80029ca:	bf00      	nop
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029ea:	4642      	mov	r2, r8
 80029ec:	464b      	mov	r3, r9
 80029ee:	1891      	adds	r1, r2, r2
 80029f0:	6239      	str	r1, [r7, #32]
 80029f2:	415b      	adcs	r3, r3
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029fa:	4641      	mov	r1, r8
 80029fc:	1854      	adds	r4, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb43 0501 	adc.w	r5, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	00eb      	lsls	r3, r5, #3
 8002a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a12:	00e2      	lsls	r2, r4, #3
 8002a14:	4614      	mov	r4, r2
 8002a16:	461d      	mov	r5, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	18e3      	adds	r3, r4, r3
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a20:	464b      	mov	r3, r9
 8002a22:	eb45 0303 	adc.w	r3, r5, r3
 8002a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a46:	4629      	mov	r1, r5
 8002a48:	008b      	lsls	r3, r1, #2
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a50:	4621      	mov	r1, r4
 8002a52:	008a      	lsls	r2, r1, #2
 8002a54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a58:	f7fd fc12 	bl	8000280 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4b60      	ldr	r3, [pc, #384]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002a62:	fba3 2302 	umull	r2, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	011c      	lsls	r4, r3, #4
 8002a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	61b9      	str	r1, [r7, #24]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	1851      	adds	r1, r2, r1
 8002a90:	6139      	str	r1, [r7, #16]
 8002a92:	4649      	mov	r1, r9
 8002a94:	414b      	adcs	r3, r1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	00cb      	lsls	r3, r1, #3
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aae:	4651      	mov	r1, sl
 8002ab0:	00ca      	lsls	r2, r1, #3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	eb42 0303 	adc.w	r3, r2, r3
 8002ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ad6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	008b      	lsls	r3, r1, #2
 8002ae8:	4641      	mov	r1, r8
 8002aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aee:	4641      	mov	r1, r8
 8002af0:	008a      	lsls	r2, r1, #2
 8002af2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002af6:	f7fd fbc3 	bl	8000280 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	@ 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	3332      	adds	r3, #50	@ 0x32
 8002b14:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b20:	441c      	add	r4, r3
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b26:	2200      	movs	r2, #0
 8002b28:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b40:	4641      	mov	r1, r8
 8002b42:	1851      	adds	r1, r2, r1
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	4649      	mov	r1, r9
 8002b48:	414b      	adcs	r3, r1
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	00cb      	lsls	r3, r1, #3
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b62:	4651      	mov	r1, sl
 8002b64:	00ca      	lsls	r2, r1, #3
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b72:	464b      	mov	r3, r9
 8002b74:	460a      	mov	r2, r1
 8002b76:	eb42 0303 	adc.w	r3, r2, r3
 8002b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b86:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b94:	4649      	mov	r1, r9
 8002b96:	008b      	lsls	r3, r1, #2
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	008a      	lsls	r2, r1, #2
 8002ba2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ba6:	f7fd fb6b 	bl	8000280 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	2164      	movs	r1, #100	@ 0x64
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	3332      	adds	r3, #50	@ 0x32
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4422      	add	r2, r4
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bde:	46bd      	mov	sp, r7
 8002be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be4:	51eb851f 	.word	0x51eb851f

08002be8 <std>:
 8002be8:	2300      	movs	r3, #0
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	e9c0 3300 	strd	r3, r3, [r0]
 8002bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bf6:	6083      	str	r3, [r0, #8]
 8002bf8:	8181      	strh	r1, [r0, #12]
 8002bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8002bfc:	81c2      	strh	r2, [r0, #14]
 8002bfe:	6183      	str	r3, [r0, #24]
 8002c00:	4619      	mov	r1, r3
 8002c02:	2208      	movs	r2, #8
 8002c04:	305c      	adds	r0, #92	@ 0x5c
 8002c06:	f000 f906 	bl	8002e16 <memset>
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <std+0x58>)
 8002c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <std+0x5c>)
 8002c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <std+0x60>)
 8002c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <std+0x64>)
 8002c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <std+0x68>)
 8002c1c:	6224      	str	r4, [r4, #32]
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d006      	beq.n	8002c30 <std+0x48>
 8002c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c26:	4294      	cmp	r4, r2
 8002c28:	d002      	beq.n	8002c30 <std+0x48>
 8002c2a:	33d0      	adds	r3, #208	@ 0xd0
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d105      	bne.n	8002c3c <std+0x54>
 8002c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c38:	f000 b966 	b.w	8002f08 <__retarget_lock_init_recursive>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	08002d91 	.word	0x08002d91
 8002c44:	08002db3 	.word	0x08002db3
 8002c48:	08002deb 	.word	0x08002deb
 8002c4c:	08002e0f 	.word	0x08002e0f
 8002c50:	20000120 	.word	0x20000120

08002c54 <stdio_exit_handler>:
 8002c54:	4a02      	ldr	r2, [pc, #8]	@ (8002c60 <stdio_exit_handler+0xc>)
 8002c56:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <stdio_exit_handler+0x10>)
 8002c58:	4803      	ldr	r0, [pc, #12]	@ (8002c68 <stdio_exit_handler+0x14>)
 8002c5a:	f000 b869 	b.w	8002d30 <_fwalk_sglue>
 8002c5e:	bf00      	nop
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	080037a5 	.word	0x080037a5
 8002c68:	2000001c 	.word	0x2000001c

08002c6c <cleanup_stdio>:
 8002c6c:	6841      	ldr	r1, [r0, #4]
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <cleanup_stdio+0x34>)
 8002c70:	4299      	cmp	r1, r3
 8002c72:	b510      	push	{r4, lr}
 8002c74:	4604      	mov	r4, r0
 8002c76:	d001      	beq.n	8002c7c <cleanup_stdio+0x10>
 8002c78:	f000 fd94 	bl	80037a4 <_fflush_r>
 8002c7c:	68a1      	ldr	r1, [r4, #8]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <cleanup_stdio+0x38>)
 8002c80:	4299      	cmp	r1, r3
 8002c82:	d002      	beq.n	8002c8a <cleanup_stdio+0x1e>
 8002c84:	4620      	mov	r0, r4
 8002c86:	f000 fd8d 	bl	80037a4 <_fflush_r>
 8002c8a:	68e1      	ldr	r1, [r4, #12]
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <cleanup_stdio+0x3c>)
 8002c8e:	4299      	cmp	r1, r3
 8002c90:	d004      	beq.n	8002c9c <cleanup_stdio+0x30>
 8002c92:	4620      	mov	r0, r4
 8002c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c98:	f000 bd84 	b.w	80037a4 <_fflush_r>
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000120 	.word	0x20000120
 8002ca4:	20000188 	.word	0x20000188
 8002ca8:	200001f0 	.word	0x200001f0

08002cac <global_stdio_init.part.0>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <global_stdio_init.part.0+0x30>)
 8002cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8002ce0 <global_stdio_init.part.0+0x34>)
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce4 <global_stdio_init.part.0+0x38>)
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2104      	movs	r1, #4
 8002cbc:	f7ff ff94 	bl	8002be8 <std>
 8002cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2109      	movs	r1, #9
 8002cc8:	f7ff ff8e 	bl	8002be8 <std>
 8002ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd6:	2112      	movs	r1, #18
 8002cd8:	f7ff bf86 	b.w	8002be8 <std>
 8002cdc:	20000258 	.word	0x20000258
 8002ce0:	20000120 	.word	0x20000120
 8002ce4:	08002c55 	.word	0x08002c55

08002ce8 <__sfp_lock_acquire>:
 8002ce8:	4801      	ldr	r0, [pc, #4]	@ (8002cf0 <__sfp_lock_acquire+0x8>)
 8002cea:	f000 b90e 	b.w	8002f0a <__retarget_lock_acquire_recursive>
 8002cee:	bf00      	nop
 8002cf0:	20000261 	.word	0x20000261

08002cf4 <__sfp_lock_release>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	@ (8002cfc <__sfp_lock_release+0x8>)
 8002cf6:	f000 b909 	b.w	8002f0c <__retarget_lock_release_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	20000261 	.word	0x20000261

08002d00 <__sinit>:
 8002d00:	b510      	push	{r4, lr}
 8002d02:	4604      	mov	r4, r0
 8002d04:	f7ff fff0 	bl	8002ce8 <__sfp_lock_acquire>
 8002d08:	6a23      	ldr	r3, [r4, #32]
 8002d0a:	b11b      	cbz	r3, 8002d14 <__sinit+0x14>
 8002d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d10:	f7ff bff0 	b.w	8002cf4 <__sfp_lock_release>
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <__sinit+0x28>)
 8002d16:	6223      	str	r3, [r4, #32]
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__sinit+0x2c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f5      	bne.n	8002d0c <__sinit+0xc>
 8002d20:	f7ff ffc4 	bl	8002cac <global_stdio_init.part.0>
 8002d24:	e7f2      	b.n	8002d0c <__sinit+0xc>
 8002d26:	bf00      	nop
 8002d28:	08002c6d 	.word	0x08002c6d
 8002d2c:	20000258 	.word	0x20000258

08002d30 <_fwalk_sglue>:
 8002d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d34:	4607      	mov	r7, r0
 8002d36:	4688      	mov	r8, r1
 8002d38:	4614      	mov	r4, r2
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d40:	f1b9 0901 	subs.w	r9, r9, #1
 8002d44:	d505      	bpl.n	8002d52 <_fwalk_sglue+0x22>
 8002d46:	6824      	ldr	r4, [r4, #0]
 8002d48:	2c00      	cmp	r4, #0
 8002d4a:	d1f7      	bne.n	8002d3c <_fwalk_sglue+0xc>
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d52:	89ab      	ldrh	r3, [r5, #12]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d907      	bls.n	8002d68 <_fwalk_sglue+0x38>
 8002d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d003      	beq.n	8002d68 <_fwalk_sglue+0x38>
 8002d60:	4629      	mov	r1, r5
 8002d62:	4638      	mov	r0, r7
 8002d64:	47c0      	blx	r8
 8002d66:	4306      	orrs	r6, r0
 8002d68:	3568      	adds	r5, #104	@ 0x68
 8002d6a:	e7e9      	b.n	8002d40 <_fwalk_sglue+0x10>

08002d6c <iprintf>:
 8002d6c:	b40f      	push	{r0, r1, r2, r3}
 8002d6e:	b507      	push	{r0, r1, r2, lr}
 8002d70:	4906      	ldr	r1, [pc, #24]	@ (8002d8c <iprintf+0x20>)
 8002d72:	ab04      	add	r3, sp, #16
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d7a:	6881      	ldr	r1, [r0, #8]
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	f000 f9e9 	bl	8003154 <_vfiprintf_r>
 8002d82:	b003      	add	sp, #12
 8002d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d88:	b004      	add	sp, #16
 8002d8a:	4770      	bx	lr
 8002d8c:	20000018 	.word	0x20000018

08002d90 <__sread>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	460c      	mov	r4, r1
 8002d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d98:	f000 f868 	bl	8002e6c <_read_r>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	bfab      	itete	ge
 8002da0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002da2:	89a3      	ldrhlt	r3, [r4, #12]
 8002da4:	181b      	addge	r3, r3, r0
 8002da6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002daa:	bfac      	ite	ge
 8002dac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dae:	81a3      	strhlt	r3, [r4, #12]
 8002db0:	bd10      	pop	{r4, pc}

08002db2 <__swrite>:
 8002db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db6:	461f      	mov	r7, r3
 8002db8:	898b      	ldrh	r3, [r1, #12]
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	4616      	mov	r6, r2
 8002dc2:	d505      	bpl.n	8002dd0 <__swrite+0x1e>
 8002dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f000 f83c 	bl	8002e48 <_lseek_r>
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	4632      	mov	r2, r6
 8002dde:	463b      	mov	r3, r7
 8002de0:	4628      	mov	r0, r5
 8002de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de6:	f000 b853 	b.w	8002e90 <_write_r>

08002dea <__sseek>:
 8002dea:	b510      	push	{r4, lr}
 8002dec:	460c      	mov	r4, r1
 8002dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df2:	f000 f829 	bl	8002e48 <_lseek_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	bf15      	itete	ne
 8002dfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e06:	81a3      	strheq	r3, [r4, #12]
 8002e08:	bf18      	it	ne
 8002e0a:	81a3      	strhne	r3, [r4, #12]
 8002e0c:	bd10      	pop	{r4, pc}

08002e0e <__sclose>:
 8002e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e12:	f000 b809 	b.w	8002e28 <_close_r>

08002e16 <memset>:
 8002e16:	4402      	add	r2, r0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d100      	bne.n	8002e20 <memset+0xa>
 8002e1e:	4770      	bx	lr
 8002e20:	f803 1b01 	strb.w	r1, [r3], #1
 8002e24:	e7f9      	b.n	8002e1a <memset+0x4>
	...

08002e28 <_close_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4d06      	ldr	r5, [pc, #24]	@ (8002e44 <_close_r+0x1c>)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd fe45 	bl	8000ac2 <_close>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_close_r+0x1a>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_close_r+0x1a>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	2000025c 	.word	0x2000025c

08002e48 <_lseek_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4d07      	ldr	r5, [pc, #28]	@ (8002e68 <_lseek_r+0x20>)
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	602a      	str	r2, [r5, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fd fe5a 	bl	8000b10 <_lseek>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_lseek_r+0x1e>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_lseek_r+0x1e>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	2000025c 	.word	0x2000025c

08002e6c <_read_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d07      	ldr	r5, [pc, #28]	@ (8002e8c <_read_r+0x20>)
 8002e70:	4604      	mov	r4, r0
 8002e72:	4608      	mov	r0, r1
 8002e74:	4611      	mov	r1, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	602a      	str	r2, [r5, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f7fd fde8 	bl	8000a50 <_read>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_read_r+0x1e>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_read_r+0x1e>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	2000025c 	.word	0x2000025c

08002e90 <_write_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4d07      	ldr	r5, [pc, #28]	@ (8002eb0 <_write_r+0x20>)
 8002e94:	4604      	mov	r4, r0
 8002e96:	4608      	mov	r0, r1
 8002e98:	4611      	mov	r1, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	602a      	str	r2, [r5, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7fd fdf3 	bl	8000a8a <_write>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d102      	bne.n	8002eae <_write_r+0x1e>
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	b103      	cbz	r3, 8002eae <_write_r+0x1e>
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	2000025c 	.word	0x2000025c

08002eb4 <__errno>:
 8002eb4:	4b01      	ldr	r3, [pc, #4]	@ (8002ebc <__errno+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef8 <__libc_init_array+0x38>)
 8002ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8002efc <__libc_init_array+0x3c>)
 8002ec6:	1b64      	subs	r4, r4, r5
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	2600      	movs	r6, #0
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8002f00 <__libc_init_array+0x40>)
 8002ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8002f04 <__libc_init_array+0x44>)
 8002ed4:	f000 fdb6 	bl	8003a44 <_init>
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	2600      	movs	r6, #0
 8002ede:	42a6      	cmp	r6, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee8:	4798      	blx	r3
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef2:	4798      	blx	r3
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	08003ac0 	.word	0x08003ac0
 8002efc:	08003ac0 	.word	0x08003ac0
 8002f00:	08003ac0 	.word	0x08003ac0
 8002f04:	08003ac4 	.word	0x08003ac4

08002f08 <__retarget_lock_init_recursive>:
 8002f08:	4770      	bx	lr

08002f0a <__retarget_lock_acquire_recursive>:
 8002f0a:	4770      	bx	lr

08002f0c <__retarget_lock_release_recursive>:
 8002f0c:	4770      	bx	lr
	...

08002f10 <_free_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4605      	mov	r5, r0
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d041      	beq.n	8002f9c <_free_r+0x8c>
 8002f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f1c:	1f0c      	subs	r4, r1, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfb8      	it	lt
 8002f22:	18e4      	addlt	r4, r4, r3
 8002f24:	f000 f8e0 	bl	80030e8 <__malloc_lock>
 8002f28:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <_free_r+0x90>)
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	b933      	cbnz	r3, 8002f3c <_free_r+0x2c>
 8002f2e:	6063      	str	r3, [r4, #4]
 8002f30:	6014      	str	r4, [r2, #0]
 8002f32:	4628      	mov	r0, r5
 8002f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f38:	f000 b8dc 	b.w	80030f4 <__malloc_unlock>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d908      	bls.n	8002f52 <_free_r+0x42>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	1821      	adds	r1, r4, r0
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf01      	itttt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	1809      	addeq	r1, r1, r0
 8002f4e:	6021      	streq	r1, [r4, #0]
 8002f50:	e7ed      	b.n	8002f2e <_free_r+0x1e>
 8002f52:	461a      	mov	r2, r3
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b10b      	cbz	r3, 8002f5c <_free_r+0x4c>
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d9fa      	bls.n	8002f52 <_free_r+0x42>
 8002f5c:	6811      	ldr	r1, [r2, #0]
 8002f5e:	1850      	adds	r0, r2, r1
 8002f60:	42a0      	cmp	r0, r4
 8002f62:	d10b      	bne.n	8002f7c <_free_r+0x6c>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	4401      	add	r1, r0
 8002f68:	1850      	adds	r0, r2, r1
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	d1e0      	bne.n	8002f32 <_free_r+0x22>
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	6053      	str	r3, [r2, #4]
 8002f76:	4408      	add	r0, r1
 8002f78:	6010      	str	r0, [r2, #0]
 8002f7a:	e7da      	b.n	8002f32 <_free_r+0x22>
 8002f7c:	d902      	bls.n	8002f84 <_free_r+0x74>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	e7d6      	b.n	8002f32 <_free_r+0x22>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	1821      	adds	r1, r4, r0
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	bf04      	itt	eq
 8002f8c:	6819      	ldreq	r1, [r3, #0]
 8002f8e:	685b      	ldreq	r3, [r3, #4]
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	bf04      	itt	eq
 8002f94:	1809      	addeq	r1, r1, r0
 8002f96:	6021      	streq	r1, [r4, #0]
 8002f98:	6054      	str	r4, [r2, #4]
 8002f9a:	e7ca      	b.n	8002f32 <_free_r+0x22>
 8002f9c:	bd38      	pop	{r3, r4, r5, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000268 	.word	0x20000268

08002fa4 <sbrk_aligned>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8002fe4 <sbrk_aligned+0x40>)
 8002fa8:	460c      	mov	r4, r1
 8002faa:	6831      	ldr	r1, [r6, #0]
 8002fac:	4605      	mov	r5, r0
 8002fae:	b911      	cbnz	r1, 8002fb6 <sbrk_aligned+0x12>
 8002fb0:	f000 fcb4 	bl	800391c <_sbrk_r>
 8002fb4:	6030      	str	r0, [r6, #0]
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 fcaf 	bl	800391c <_sbrk_r>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d103      	bne.n	8002fca <sbrk_aligned+0x26>
 8002fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	1cc4      	adds	r4, r0, #3
 8002fcc:	f024 0403 	bic.w	r4, r4, #3
 8002fd0:	42a0      	cmp	r0, r4
 8002fd2:	d0f8      	beq.n	8002fc6 <sbrk_aligned+0x22>
 8002fd4:	1a21      	subs	r1, r4, r0
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f000 fca0 	bl	800391c <_sbrk_r>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d1f2      	bne.n	8002fc6 <sbrk_aligned+0x22>
 8002fe0:	e7ef      	b.n	8002fc2 <sbrk_aligned+0x1e>
 8002fe2:	bf00      	nop
 8002fe4:	20000264 	.word	0x20000264

08002fe8 <_malloc_r>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	1ccd      	adds	r5, r1, #3
 8002fee:	f025 0503 	bic.w	r5, r5, #3
 8002ff2:	3508      	adds	r5, #8
 8002ff4:	2d0c      	cmp	r5, #12
 8002ff6:	bf38      	it	cc
 8002ff8:	250c      	movcc	r5, #12
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	4606      	mov	r6, r0
 8002ffe:	db01      	blt.n	8003004 <_malloc_r+0x1c>
 8003000:	42a9      	cmp	r1, r5
 8003002:	d904      	bls.n	800300e <_malloc_r+0x26>
 8003004:	230c      	movs	r3, #12
 8003006:	6033      	str	r3, [r6, #0]
 8003008:	2000      	movs	r0, #0
 800300a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800300e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030e4 <_malloc_r+0xfc>
 8003012:	f000 f869 	bl	80030e8 <__malloc_lock>
 8003016:	f8d8 3000 	ldr.w	r3, [r8]
 800301a:	461c      	mov	r4, r3
 800301c:	bb44      	cbnz	r4, 8003070 <_malloc_r+0x88>
 800301e:	4629      	mov	r1, r5
 8003020:	4630      	mov	r0, r6
 8003022:	f7ff ffbf 	bl	8002fa4 <sbrk_aligned>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	4604      	mov	r4, r0
 800302a:	d158      	bne.n	80030de <_malloc_r+0xf6>
 800302c:	f8d8 4000 	ldr.w	r4, [r8]
 8003030:	4627      	mov	r7, r4
 8003032:	2f00      	cmp	r7, #0
 8003034:	d143      	bne.n	80030be <_malloc_r+0xd6>
 8003036:	2c00      	cmp	r4, #0
 8003038:	d04b      	beq.n	80030d2 <_malloc_r+0xea>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	4639      	mov	r1, r7
 800303e:	4630      	mov	r0, r6
 8003040:	eb04 0903 	add.w	r9, r4, r3
 8003044:	f000 fc6a 	bl	800391c <_sbrk_r>
 8003048:	4581      	cmp	r9, r0
 800304a:	d142      	bne.n	80030d2 <_malloc_r+0xea>
 800304c:	6821      	ldr	r1, [r4, #0]
 800304e:	1a6d      	subs	r5, r5, r1
 8003050:	4629      	mov	r1, r5
 8003052:	4630      	mov	r0, r6
 8003054:	f7ff ffa6 	bl	8002fa4 <sbrk_aligned>
 8003058:	3001      	adds	r0, #1
 800305a:	d03a      	beq.n	80030d2 <_malloc_r+0xea>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	442b      	add	r3, r5
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	f8d8 3000 	ldr.w	r3, [r8]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	bb62      	cbnz	r2, 80030c4 <_malloc_r+0xdc>
 800306a:	f8c8 7000 	str.w	r7, [r8]
 800306e:	e00f      	b.n	8003090 <_malloc_r+0xa8>
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	1b52      	subs	r2, r2, r5
 8003074:	d420      	bmi.n	80030b8 <_malloc_r+0xd0>
 8003076:	2a0b      	cmp	r2, #11
 8003078:	d917      	bls.n	80030aa <_malloc_r+0xc2>
 800307a:	1961      	adds	r1, r4, r5
 800307c:	42a3      	cmp	r3, r4
 800307e:	6025      	str	r5, [r4, #0]
 8003080:	bf18      	it	ne
 8003082:	6059      	strne	r1, [r3, #4]
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	bf08      	it	eq
 8003088:	f8c8 1000 	streq.w	r1, [r8]
 800308c:	5162      	str	r2, [r4, r5]
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	4630      	mov	r0, r6
 8003092:	f000 f82f 	bl	80030f4 <__malloc_unlock>
 8003096:	f104 000b 	add.w	r0, r4, #11
 800309a:	1d23      	adds	r3, r4, #4
 800309c:	f020 0007 	bic.w	r0, r0, #7
 80030a0:	1ac2      	subs	r2, r0, r3
 80030a2:	bf1c      	itt	ne
 80030a4:	1a1b      	subne	r3, r3, r0
 80030a6:	50a3      	strne	r3, [r4, r2]
 80030a8:	e7af      	b.n	800300a <_malloc_r+0x22>
 80030aa:	6862      	ldr	r2, [r4, #4]
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	bf0c      	ite	eq
 80030b0:	f8c8 2000 	streq.w	r2, [r8]
 80030b4:	605a      	strne	r2, [r3, #4]
 80030b6:	e7eb      	b.n	8003090 <_malloc_r+0xa8>
 80030b8:	4623      	mov	r3, r4
 80030ba:	6864      	ldr	r4, [r4, #4]
 80030bc:	e7ae      	b.n	800301c <_malloc_r+0x34>
 80030be:	463c      	mov	r4, r7
 80030c0:	687f      	ldr	r7, [r7, #4]
 80030c2:	e7b6      	b.n	8003032 <_malloc_r+0x4a>
 80030c4:	461a      	mov	r2, r3
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	d1fb      	bne.n	80030c4 <_malloc_r+0xdc>
 80030cc:	2300      	movs	r3, #0
 80030ce:	6053      	str	r3, [r2, #4]
 80030d0:	e7de      	b.n	8003090 <_malloc_r+0xa8>
 80030d2:	230c      	movs	r3, #12
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	4630      	mov	r0, r6
 80030d8:	f000 f80c 	bl	80030f4 <__malloc_unlock>
 80030dc:	e794      	b.n	8003008 <_malloc_r+0x20>
 80030de:	6005      	str	r5, [r0, #0]
 80030e0:	e7d6      	b.n	8003090 <_malloc_r+0xa8>
 80030e2:	bf00      	nop
 80030e4:	20000268 	.word	0x20000268

080030e8 <__malloc_lock>:
 80030e8:	4801      	ldr	r0, [pc, #4]	@ (80030f0 <__malloc_lock+0x8>)
 80030ea:	f7ff bf0e 	b.w	8002f0a <__retarget_lock_acquire_recursive>
 80030ee:	bf00      	nop
 80030f0:	20000260 	.word	0x20000260

080030f4 <__malloc_unlock>:
 80030f4:	4801      	ldr	r0, [pc, #4]	@ (80030fc <__malloc_unlock+0x8>)
 80030f6:	f7ff bf09 	b.w	8002f0c <__retarget_lock_release_recursive>
 80030fa:	bf00      	nop
 80030fc:	20000260 	.word	0x20000260

08003100 <__sfputc_r>:
 8003100:	6893      	ldr	r3, [r2, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	b410      	push	{r4}
 8003108:	6093      	str	r3, [r2, #8]
 800310a:	da08      	bge.n	800311e <__sfputc_r+0x1e>
 800310c:	6994      	ldr	r4, [r2, #24]
 800310e:	42a3      	cmp	r3, r4
 8003110:	db01      	blt.n	8003116 <__sfputc_r+0x16>
 8003112:	290a      	cmp	r1, #10
 8003114:	d103      	bne.n	800311e <__sfputc_r+0x1e>
 8003116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800311a:	f000 bb6b 	b.w	80037f4 <__swbuf_r>
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	1c58      	adds	r0, r3, #1
 8003122:	6010      	str	r0, [r2, #0]
 8003124:	7019      	strb	r1, [r3, #0]
 8003126:	4608      	mov	r0, r1
 8003128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800312c:	4770      	bx	lr

0800312e <__sfputs_r>:
 800312e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003130:	4606      	mov	r6, r0
 8003132:	460f      	mov	r7, r1
 8003134:	4614      	mov	r4, r2
 8003136:	18d5      	adds	r5, r2, r3
 8003138:	42ac      	cmp	r4, r5
 800313a:	d101      	bne.n	8003140 <__sfputs_r+0x12>
 800313c:	2000      	movs	r0, #0
 800313e:	e007      	b.n	8003150 <__sfputs_r+0x22>
 8003140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003144:	463a      	mov	r2, r7
 8003146:	4630      	mov	r0, r6
 8003148:	f7ff ffda 	bl	8003100 <__sfputc_r>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d1f3      	bne.n	8003138 <__sfputs_r+0xa>
 8003150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003154 <_vfiprintf_r>:
 8003154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003158:	460d      	mov	r5, r1
 800315a:	b09d      	sub	sp, #116	@ 0x74
 800315c:	4614      	mov	r4, r2
 800315e:	4698      	mov	r8, r3
 8003160:	4606      	mov	r6, r0
 8003162:	b118      	cbz	r0, 800316c <_vfiprintf_r+0x18>
 8003164:	6a03      	ldr	r3, [r0, #32]
 8003166:	b90b      	cbnz	r3, 800316c <_vfiprintf_r+0x18>
 8003168:	f7ff fdca 	bl	8002d00 <__sinit>
 800316c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800316e:	07d9      	lsls	r1, r3, #31
 8003170:	d405      	bmi.n	800317e <_vfiprintf_r+0x2a>
 8003172:	89ab      	ldrh	r3, [r5, #12]
 8003174:	059a      	lsls	r2, r3, #22
 8003176:	d402      	bmi.n	800317e <_vfiprintf_r+0x2a>
 8003178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800317a:	f7ff fec6 	bl	8002f0a <__retarget_lock_acquire_recursive>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	d501      	bpl.n	8003188 <_vfiprintf_r+0x34>
 8003184:	692b      	ldr	r3, [r5, #16]
 8003186:	b99b      	cbnz	r3, 80031b0 <_vfiprintf_r+0x5c>
 8003188:	4629      	mov	r1, r5
 800318a:	4630      	mov	r0, r6
 800318c:	f000 fb70 	bl	8003870 <__swsetup_r>
 8003190:	b170      	cbz	r0, 80031b0 <_vfiprintf_r+0x5c>
 8003192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003194:	07dc      	lsls	r4, r3, #31
 8003196:	d504      	bpl.n	80031a2 <_vfiprintf_r+0x4e>
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	b01d      	add	sp, #116	@ 0x74
 800319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a2:	89ab      	ldrh	r3, [r5, #12]
 80031a4:	0598      	lsls	r0, r3, #22
 80031a6:	d4f7      	bmi.n	8003198 <_vfiprintf_r+0x44>
 80031a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031aa:	f7ff feaf 	bl	8002f0c <__retarget_lock_release_recursive>
 80031ae:	e7f3      	b.n	8003198 <_vfiprintf_r+0x44>
 80031b0:	2300      	movs	r3, #0
 80031b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80031b4:	2320      	movs	r3, #32
 80031b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80031be:	2330      	movs	r3, #48	@ 0x30
 80031c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003370 <_vfiprintf_r+0x21c>
 80031c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031c8:	f04f 0901 	mov.w	r9, #1
 80031cc:	4623      	mov	r3, r4
 80031ce:	469a      	mov	sl, r3
 80031d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031d4:	b10a      	cbz	r2, 80031da <_vfiprintf_r+0x86>
 80031d6:	2a25      	cmp	r2, #37	@ 0x25
 80031d8:	d1f9      	bne.n	80031ce <_vfiprintf_r+0x7a>
 80031da:	ebba 0b04 	subs.w	fp, sl, r4
 80031de:	d00b      	beq.n	80031f8 <_vfiprintf_r+0xa4>
 80031e0:	465b      	mov	r3, fp
 80031e2:	4622      	mov	r2, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	4630      	mov	r0, r6
 80031e8:	f7ff ffa1 	bl	800312e <__sfputs_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	f000 80a7 	beq.w	8003340 <_vfiprintf_r+0x1ec>
 80031f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031f4:	445a      	add	r2, fp
 80031f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80031f8:	f89a 3000 	ldrb.w	r3, [sl]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 809f 	beq.w	8003340 <_vfiprintf_r+0x1ec>
 8003202:	2300      	movs	r3, #0
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800320c:	f10a 0a01 	add.w	sl, sl, #1
 8003210:	9304      	str	r3, [sp, #16]
 8003212:	9307      	str	r3, [sp, #28]
 8003214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003218:	931a      	str	r3, [sp, #104]	@ 0x68
 800321a:	4654      	mov	r4, sl
 800321c:	2205      	movs	r2, #5
 800321e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003222:	4853      	ldr	r0, [pc, #332]	@ (8003370 <_vfiprintf_r+0x21c>)
 8003224:	f7fc ffdc 	bl	80001e0 <memchr>
 8003228:	9a04      	ldr	r2, [sp, #16]
 800322a:	b9d8      	cbnz	r0, 8003264 <_vfiprintf_r+0x110>
 800322c:	06d1      	lsls	r1, r2, #27
 800322e:	bf44      	itt	mi
 8003230:	2320      	movmi	r3, #32
 8003232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003236:	0713      	lsls	r3, r2, #28
 8003238:	bf44      	itt	mi
 800323a:	232b      	movmi	r3, #43	@ 0x2b
 800323c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003240:	f89a 3000 	ldrb.w	r3, [sl]
 8003244:	2b2a      	cmp	r3, #42	@ 0x2a
 8003246:	d015      	beq.n	8003274 <_vfiprintf_r+0x120>
 8003248:	9a07      	ldr	r2, [sp, #28]
 800324a:	4654      	mov	r4, sl
 800324c:	2000      	movs	r0, #0
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	4621      	mov	r1, r4
 8003254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003258:	3b30      	subs	r3, #48	@ 0x30
 800325a:	2b09      	cmp	r3, #9
 800325c:	d94b      	bls.n	80032f6 <_vfiprintf_r+0x1a2>
 800325e:	b1b0      	cbz	r0, 800328e <_vfiprintf_r+0x13a>
 8003260:	9207      	str	r2, [sp, #28]
 8003262:	e014      	b.n	800328e <_vfiprintf_r+0x13a>
 8003264:	eba0 0308 	sub.w	r3, r0, r8
 8003268:	fa09 f303 	lsl.w	r3, r9, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	9304      	str	r3, [sp, #16]
 8003270:	46a2      	mov	sl, r4
 8003272:	e7d2      	b.n	800321a <_vfiprintf_r+0xc6>
 8003274:	9b03      	ldr	r3, [sp, #12]
 8003276:	1d19      	adds	r1, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	9103      	str	r1, [sp, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	bfbb      	ittet	lt
 8003280:	425b      	neglt	r3, r3
 8003282:	f042 0202 	orrlt.w	r2, r2, #2
 8003286:	9307      	strge	r3, [sp, #28]
 8003288:	9307      	strlt	r3, [sp, #28]
 800328a:	bfb8      	it	lt
 800328c:	9204      	strlt	r2, [sp, #16]
 800328e:	7823      	ldrb	r3, [r4, #0]
 8003290:	2b2e      	cmp	r3, #46	@ 0x2e
 8003292:	d10a      	bne.n	80032aa <_vfiprintf_r+0x156>
 8003294:	7863      	ldrb	r3, [r4, #1]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	d132      	bne.n	8003300 <_vfiprintf_r+0x1ac>
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	1d1a      	adds	r2, r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	9203      	str	r2, [sp, #12]
 80032a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032a6:	3402      	adds	r4, #2
 80032a8:	9305      	str	r3, [sp, #20]
 80032aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003380 <_vfiprintf_r+0x22c>
 80032ae:	7821      	ldrb	r1, [r4, #0]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4650      	mov	r0, sl
 80032b4:	f7fc ff94 	bl	80001e0 <memchr>
 80032b8:	b138      	cbz	r0, 80032ca <_vfiprintf_r+0x176>
 80032ba:	9b04      	ldr	r3, [sp, #16]
 80032bc:	eba0 000a 	sub.w	r0, r0, sl
 80032c0:	2240      	movs	r2, #64	@ 0x40
 80032c2:	4082      	lsls	r2, r0
 80032c4:	4313      	orrs	r3, r2
 80032c6:	3401      	adds	r4, #1
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ce:	4829      	ldr	r0, [pc, #164]	@ (8003374 <_vfiprintf_r+0x220>)
 80032d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032d4:	2206      	movs	r2, #6
 80032d6:	f7fc ff83 	bl	80001e0 <memchr>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d03f      	beq.n	800335e <_vfiprintf_r+0x20a>
 80032de:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <_vfiprintf_r+0x224>)
 80032e0:	bb1b      	cbnz	r3, 800332a <_vfiprintf_r+0x1d6>
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	3307      	adds	r3, #7
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	3308      	adds	r3, #8
 80032ec:	9303      	str	r3, [sp, #12]
 80032ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032f0:	443b      	add	r3, r7
 80032f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80032f4:	e76a      	b.n	80031cc <_vfiprintf_r+0x78>
 80032f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032fa:	460c      	mov	r4, r1
 80032fc:	2001      	movs	r0, #1
 80032fe:	e7a8      	b.n	8003252 <_vfiprintf_r+0xfe>
 8003300:	2300      	movs	r3, #0
 8003302:	3401      	adds	r4, #1
 8003304:	9305      	str	r3, [sp, #20]
 8003306:	4619      	mov	r1, r3
 8003308:	f04f 0c0a 	mov.w	ip, #10
 800330c:	4620      	mov	r0, r4
 800330e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003312:	3a30      	subs	r2, #48	@ 0x30
 8003314:	2a09      	cmp	r2, #9
 8003316:	d903      	bls.n	8003320 <_vfiprintf_r+0x1cc>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0c6      	beq.n	80032aa <_vfiprintf_r+0x156>
 800331c:	9105      	str	r1, [sp, #20]
 800331e:	e7c4      	b.n	80032aa <_vfiprintf_r+0x156>
 8003320:	fb0c 2101 	mla	r1, ip, r1, r2
 8003324:	4604      	mov	r4, r0
 8003326:	2301      	movs	r3, #1
 8003328:	e7f0      	b.n	800330c <_vfiprintf_r+0x1b8>
 800332a:	ab03      	add	r3, sp, #12
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	462a      	mov	r2, r5
 8003330:	4b12      	ldr	r3, [pc, #72]	@ (800337c <_vfiprintf_r+0x228>)
 8003332:	a904      	add	r1, sp, #16
 8003334:	4630      	mov	r0, r6
 8003336:	f3af 8000 	nop.w
 800333a:	4607      	mov	r7, r0
 800333c:	1c78      	adds	r0, r7, #1
 800333e:	d1d6      	bne.n	80032ee <_vfiprintf_r+0x19a>
 8003340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003342:	07d9      	lsls	r1, r3, #31
 8003344:	d405      	bmi.n	8003352 <_vfiprintf_r+0x1fe>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	059a      	lsls	r2, r3, #22
 800334a:	d402      	bmi.n	8003352 <_vfiprintf_r+0x1fe>
 800334c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800334e:	f7ff fddd 	bl	8002f0c <__retarget_lock_release_recursive>
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	065b      	lsls	r3, r3, #25
 8003356:	f53f af1f 	bmi.w	8003198 <_vfiprintf_r+0x44>
 800335a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800335c:	e71e      	b.n	800319c <_vfiprintf_r+0x48>
 800335e:	ab03      	add	r3, sp, #12
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	462a      	mov	r2, r5
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <_vfiprintf_r+0x228>)
 8003366:	a904      	add	r1, sp, #16
 8003368:	4630      	mov	r0, r6
 800336a:	f000 f879 	bl	8003460 <_printf_i>
 800336e:	e7e4      	b.n	800333a <_vfiprintf_r+0x1e6>
 8003370:	08003a84 	.word	0x08003a84
 8003374:	08003a8e 	.word	0x08003a8e
 8003378:	00000000 	.word	0x00000000
 800337c:	0800312f 	.word	0x0800312f
 8003380:	08003a8a 	.word	0x08003a8a

08003384 <_printf_common>:
 8003384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	4616      	mov	r6, r2
 800338a:	4698      	mov	r8, r3
 800338c:	688a      	ldr	r2, [r1, #8]
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003394:	4293      	cmp	r3, r2
 8003396:	bfb8      	it	lt
 8003398:	4613      	movlt	r3, r2
 800339a:	6033      	str	r3, [r6, #0]
 800339c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033a0:	4607      	mov	r7, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	b10a      	cbz	r2, 80033aa <_printf_common+0x26>
 80033a6:	3301      	adds	r3, #1
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	0699      	lsls	r1, r3, #26
 80033ae:	bf42      	ittt	mi
 80033b0:	6833      	ldrmi	r3, [r6, #0]
 80033b2:	3302      	addmi	r3, #2
 80033b4:	6033      	strmi	r3, [r6, #0]
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	f015 0506 	ands.w	r5, r5, #6
 80033bc:	d106      	bne.n	80033cc <_printf_common+0x48>
 80033be:	f104 0a19 	add.w	sl, r4, #25
 80033c2:	68e3      	ldr	r3, [r4, #12]
 80033c4:	6832      	ldr	r2, [r6, #0]
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	42ab      	cmp	r3, r5
 80033ca:	dc26      	bgt.n	800341a <_printf_common+0x96>
 80033cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	3b00      	subs	r3, #0
 80033d4:	bf18      	it	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	0692      	lsls	r2, r2, #26
 80033da:	d42b      	bmi.n	8003434 <_printf_common+0xb0>
 80033dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033e0:	4641      	mov	r1, r8
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c8      	blx	r9
 80033e6:	3001      	adds	r0, #1
 80033e8:	d01e      	beq.n	8003428 <_printf_common+0xa4>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	6922      	ldr	r2, [r4, #16]
 80033ee:	f003 0306 	and.w	r3, r3, #6
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf02      	ittt	eq
 80033f6:	68e5      	ldreq	r5, [r4, #12]
 80033f8:	6833      	ldreq	r3, [r6, #0]
 80033fa:	1aed      	subeq	r5, r5, r3
 80033fc:	68a3      	ldr	r3, [r4, #8]
 80033fe:	bf0c      	ite	eq
 8003400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003404:	2500      	movne	r5, #0
 8003406:	4293      	cmp	r3, r2
 8003408:	bfc4      	itt	gt
 800340a:	1a9b      	subgt	r3, r3, r2
 800340c:	18ed      	addgt	r5, r5, r3
 800340e:	2600      	movs	r6, #0
 8003410:	341a      	adds	r4, #26
 8003412:	42b5      	cmp	r5, r6
 8003414:	d11a      	bne.n	800344c <_printf_common+0xc8>
 8003416:	2000      	movs	r0, #0
 8003418:	e008      	b.n	800342c <_printf_common+0xa8>
 800341a:	2301      	movs	r3, #1
 800341c:	4652      	mov	r2, sl
 800341e:	4641      	mov	r1, r8
 8003420:	4638      	mov	r0, r7
 8003422:	47c8      	blx	r9
 8003424:	3001      	adds	r0, #1
 8003426:	d103      	bne.n	8003430 <_printf_common+0xac>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003430:	3501      	adds	r5, #1
 8003432:	e7c6      	b.n	80033c2 <_printf_common+0x3e>
 8003434:	18e1      	adds	r1, r4, r3
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	2030      	movs	r0, #48	@ 0x30
 800343a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800343e:	4422      	add	r2, r4
 8003440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003448:	3302      	adds	r3, #2
 800344a:	e7c7      	b.n	80033dc <_printf_common+0x58>
 800344c:	2301      	movs	r3, #1
 800344e:	4622      	mov	r2, r4
 8003450:	4641      	mov	r1, r8
 8003452:	4638      	mov	r0, r7
 8003454:	47c8      	blx	r9
 8003456:	3001      	adds	r0, #1
 8003458:	d0e6      	beq.n	8003428 <_printf_common+0xa4>
 800345a:	3601      	adds	r6, #1
 800345c:	e7d9      	b.n	8003412 <_printf_common+0x8e>
	...

08003460 <_printf_i>:
 8003460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	7e0f      	ldrb	r7, [r1, #24]
 8003466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003468:	2f78      	cmp	r7, #120	@ 0x78
 800346a:	4691      	mov	r9, r2
 800346c:	4680      	mov	r8, r0
 800346e:	460c      	mov	r4, r1
 8003470:	469a      	mov	sl, r3
 8003472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003476:	d807      	bhi.n	8003488 <_printf_i+0x28>
 8003478:	2f62      	cmp	r7, #98	@ 0x62
 800347a:	d80a      	bhi.n	8003492 <_printf_i+0x32>
 800347c:	2f00      	cmp	r7, #0
 800347e:	f000 80d1 	beq.w	8003624 <_printf_i+0x1c4>
 8003482:	2f58      	cmp	r7, #88	@ 0x58
 8003484:	f000 80b8 	beq.w	80035f8 <_printf_i+0x198>
 8003488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800348c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003490:	e03a      	b.n	8003508 <_printf_i+0xa8>
 8003492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003496:	2b15      	cmp	r3, #21
 8003498:	d8f6      	bhi.n	8003488 <_printf_i+0x28>
 800349a:	a101      	add	r1, pc, #4	@ (adr r1, 80034a0 <_printf_i+0x40>)
 800349c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	08003489 	.word	0x08003489
 80034ac:	08003489 	.word	0x08003489
 80034b0:	08003489 	.word	0x08003489
 80034b4:	08003489 	.word	0x08003489
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003489 	.word	0x08003489
 80034c0:	08003489 	.word	0x08003489
 80034c4:	08003489 	.word	0x08003489
 80034c8:	08003489 	.word	0x08003489
 80034cc:	0800360b 	.word	0x0800360b
 80034d0:	08003537 	.word	0x08003537
 80034d4:	080035c5 	.word	0x080035c5
 80034d8:	08003489 	.word	0x08003489
 80034dc:	08003489 	.word	0x08003489
 80034e0:	0800362d 	.word	0x0800362d
 80034e4:	08003489 	.word	0x08003489
 80034e8:	08003537 	.word	0x08003537
 80034ec:	08003489 	.word	0x08003489
 80034f0:	08003489 	.word	0x08003489
 80034f4:	080035cd 	.word	0x080035cd
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6032      	str	r2, [r6, #0]
 8003500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003508:	2301      	movs	r3, #1
 800350a:	e09c      	b.n	8003646 <_printf_i+0x1e6>
 800350c:	6833      	ldr	r3, [r6, #0]
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1d19      	adds	r1, r3, #4
 8003512:	6031      	str	r1, [r6, #0]
 8003514:	0606      	lsls	r6, r0, #24
 8003516:	d501      	bpl.n	800351c <_printf_i+0xbc>
 8003518:	681d      	ldr	r5, [r3, #0]
 800351a:	e003      	b.n	8003524 <_printf_i+0xc4>
 800351c:	0645      	lsls	r5, r0, #25
 800351e:	d5fb      	bpl.n	8003518 <_printf_i+0xb8>
 8003520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003524:	2d00      	cmp	r5, #0
 8003526:	da03      	bge.n	8003530 <_printf_i+0xd0>
 8003528:	232d      	movs	r3, #45	@ 0x2d
 800352a:	426d      	negs	r5, r5
 800352c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003530:	4858      	ldr	r0, [pc, #352]	@ (8003694 <_printf_i+0x234>)
 8003532:	230a      	movs	r3, #10
 8003534:	e011      	b.n	800355a <_printf_i+0xfa>
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	6833      	ldr	r3, [r6, #0]
 800353a:	0608      	lsls	r0, r1, #24
 800353c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003540:	d402      	bmi.n	8003548 <_printf_i+0xe8>
 8003542:	0649      	lsls	r1, r1, #25
 8003544:	bf48      	it	mi
 8003546:	b2ad      	uxthmi	r5, r5
 8003548:	2f6f      	cmp	r7, #111	@ 0x6f
 800354a:	4852      	ldr	r0, [pc, #328]	@ (8003694 <_printf_i+0x234>)
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	bf14      	ite	ne
 8003550:	230a      	movne	r3, #10
 8003552:	2308      	moveq	r3, #8
 8003554:	2100      	movs	r1, #0
 8003556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800355a:	6866      	ldr	r6, [r4, #4]
 800355c:	60a6      	str	r6, [r4, #8]
 800355e:	2e00      	cmp	r6, #0
 8003560:	db05      	blt.n	800356e <_printf_i+0x10e>
 8003562:	6821      	ldr	r1, [r4, #0]
 8003564:	432e      	orrs	r6, r5
 8003566:	f021 0104 	bic.w	r1, r1, #4
 800356a:	6021      	str	r1, [r4, #0]
 800356c:	d04b      	beq.n	8003606 <_printf_i+0x1a6>
 800356e:	4616      	mov	r6, r2
 8003570:	fbb5 f1f3 	udiv	r1, r5, r3
 8003574:	fb03 5711 	mls	r7, r3, r1, r5
 8003578:	5dc7      	ldrb	r7, [r0, r7]
 800357a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800357e:	462f      	mov	r7, r5
 8003580:	42bb      	cmp	r3, r7
 8003582:	460d      	mov	r5, r1
 8003584:	d9f4      	bls.n	8003570 <_printf_i+0x110>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d10b      	bne.n	80035a2 <_printf_i+0x142>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	07df      	lsls	r7, r3, #31
 800358e:	d508      	bpl.n	80035a2 <_printf_i+0x142>
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	6861      	ldr	r1, [r4, #4]
 8003594:	4299      	cmp	r1, r3
 8003596:	bfde      	ittt	le
 8003598:	2330      	movle	r3, #48	@ 0x30
 800359a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800359e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035a2:	1b92      	subs	r2, r2, r6
 80035a4:	6122      	str	r2, [r4, #16]
 80035a6:	f8cd a000 	str.w	sl, [sp]
 80035aa:	464b      	mov	r3, r9
 80035ac:	aa03      	add	r2, sp, #12
 80035ae:	4621      	mov	r1, r4
 80035b0:	4640      	mov	r0, r8
 80035b2:	f7ff fee7 	bl	8003384 <_printf_common>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d14a      	bne.n	8003650 <_printf_i+0x1f0>
 80035ba:	f04f 30ff 	mov.w	r0, #4294967295
 80035be:	b004      	add	sp, #16
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	4832      	ldr	r0, [pc, #200]	@ (8003698 <_printf_i+0x238>)
 80035ce:	2778      	movs	r7, #120	@ 0x78
 80035d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	6831      	ldr	r1, [r6, #0]
 80035d8:	061f      	lsls	r7, r3, #24
 80035da:	f851 5b04 	ldr.w	r5, [r1], #4
 80035de:	d402      	bmi.n	80035e6 <_printf_i+0x186>
 80035e0:	065f      	lsls	r7, r3, #25
 80035e2:	bf48      	it	mi
 80035e4:	b2ad      	uxthmi	r5, r5
 80035e6:	6031      	str	r1, [r6, #0]
 80035e8:	07d9      	lsls	r1, r3, #31
 80035ea:	bf44      	itt	mi
 80035ec:	f043 0320 	orrmi.w	r3, r3, #32
 80035f0:	6023      	strmi	r3, [r4, #0]
 80035f2:	b11d      	cbz	r5, 80035fc <_printf_i+0x19c>
 80035f4:	2310      	movs	r3, #16
 80035f6:	e7ad      	b.n	8003554 <_printf_i+0xf4>
 80035f8:	4826      	ldr	r0, [pc, #152]	@ (8003694 <_printf_i+0x234>)
 80035fa:	e7e9      	b.n	80035d0 <_printf_i+0x170>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	f023 0320 	bic.w	r3, r3, #32
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	e7f6      	b.n	80035f4 <_printf_i+0x194>
 8003606:	4616      	mov	r6, r2
 8003608:	e7bd      	b.n	8003586 <_printf_i+0x126>
 800360a:	6833      	ldr	r3, [r6, #0]
 800360c:	6825      	ldr	r5, [r4, #0]
 800360e:	6961      	ldr	r1, [r4, #20]
 8003610:	1d18      	adds	r0, r3, #4
 8003612:	6030      	str	r0, [r6, #0]
 8003614:	062e      	lsls	r6, r5, #24
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	d501      	bpl.n	800361e <_printf_i+0x1be>
 800361a:	6019      	str	r1, [r3, #0]
 800361c:	e002      	b.n	8003624 <_printf_i+0x1c4>
 800361e:	0668      	lsls	r0, r5, #25
 8003620:	d5fb      	bpl.n	800361a <_printf_i+0x1ba>
 8003622:	8019      	strh	r1, [r3, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	6123      	str	r3, [r4, #16]
 8003628:	4616      	mov	r6, r2
 800362a:	e7bc      	b.n	80035a6 <_printf_i+0x146>
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	6032      	str	r2, [r6, #0]
 8003632:	681e      	ldr	r6, [r3, #0]
 8003634:	6862      	ldr	r2, [r4, #4]
 8003636:	2100      	movs	r1, #0
 8003638:	4630      	mov	r0, r6
 800363a:	f7fc fdd1 	bl	80001e0 <memchr>
 800363e:	b108      	cbz	r0, 8003644 <_printf_i+0x1e4>
 8003640:	1b80      	subs	r0, r0, r6
 8003642:	6060      	str	r0, [r4, #4]
 8003644:	6863      	ldr	r3, [r4, #4]
 8003646:	6123      	str	r3, [r4, #16]
 8003648:	2300      	movs	r3, #0
 800364a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800364e:	e7aa      	b.n	80035a6 <_printf_i+0x146>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	4632      	mov	r2, r6
 8003654:	4649      	mov	r1, r9
 8003656:	4640      	mov	r0, r8
 8003658:	47d0      	blx	sl
 800365a:	3001      	adds	r0, #1
 800365c:	d0ad      	beq.n	80035ba <_printf_i+0x15a>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	079b      	lsls	r3, r3, #30
 8003662:	d413      	bmi.n	800368c <_printf_i+0x22c>
 8003664:	68e0      	ldr	r0, [r4, #12]
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	4298      	cmp	r0, r3
 800366a:	bfb8      	it	lt
 800366c:	4618      	movlt	r0, r3
 800366e:	e7a6      	b.n	80035be <_printf_i+0x15e>
 8003670:	2301      	movs	r3, #1
 8003672:	4632      	mov	r2, r6
 8003674:	4649      	mov	r1, r9
 8003676:	4640      	mov	r0, r8
 8003678:	47d0      	blx	sl
 800367a:	3001      	adds	r0, #1
 800367c:	d09d      	beq.n	80035ba <_printf_i+0x15a>
 800367e:	3501      	adds	r5, #1
 8003680:	68e3      	ldr	r3, [r4, #12]
 8003682:	9903      	ldr	r1, [sp, #12]
 8003684:	1a5b      	subs	r3, r3, r1
 8003686:	42ab      	cmp	r3, r5
 8003688:	dcf2      	bgt.n	8003670 <_printf_i+0x210>
 800368a:	e7eb      	b.n	8003664 <_printf_i+0x204>
 800368c:	2500      	movs	r5, #0
 800368e:	f104 0619 	add.w	r6, r4, #25
 8003692:	e7f5      	b.n	8003680 <_printf_i+0x220>
 8003694:	08003a95 	.word	0x08003a95
 8003698:	08003aa6 	.word	0x08003aa6

0800369c <__sflush_r>:
 800369c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a4:	0716      	lsls	r6, r2, #28
 80036a6:	4605      	mov	r5, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	d454      	bmi.n	8003756 <__sflush_r+0xba>
 80036ac:	684b      	ldr	r3, [r1, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dc02      	bgt.n	80036b8 <__sflush_r+0x1c>
 80036b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dd48      	ble.n	800374a <__sflush_r+0xae>
 80036b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036ba:	2e00      	cmp	r6, #0
 80036bc:	d045      	beq.n	800374a <__sflush_r+0xae>
 80036be:	2300      	movs	r3, #0
 80036c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036c4:	682f      	ldr	r7, [r5, #0]
 80036c6:	6a21      	ldr	r1, [r4, #32]
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	d030      	beq.n	800372e <__sflush_r+0x92>
 80036cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	0759      	lsls	r1, r3, #29
 80036d2:	d505      	bpl.n	80036e0 <__sflush_r+0x44>
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036da:	b10b      	cbz	r3, 80036e0 <__sflush_r+0x44>
 80036dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036de:	1ad2      	subs	r2, r2, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036e4:	6a21      	ldr	r1, [r4, #32]
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b0      	blx	r6
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	d106      	bne.n	80036fe <__sflush_r+0x62>
 80036f0:	6829      	ldr	r1, [r5, #0]
 80036f2:	291d      	cmp	r1, #29
 80036f4:	d82b      	bhi.n	800374e <__sflush_r+0xb2>
 80036f6:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <__sflush_r+0x104>)
 80036f8:	40ca      	lsrs	r2, r1
 80036fa:	07d6      	lsls	r6, r2, #31
 80036fc:	d527      	bpl.n	800374e <__sflush_r+0xb2>
 80036fe:	2200      	movs	r2, #0
 8003700:	6062      	str	r2, [r4, #4]
 8003702:	04d9      	lsls	r1, r3, #19
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	6022      	str	r2, [r4, #0]
 8003708:	d504      	bpl.n	8003714 <__sflush_r+0x78>
 800370a:	1c42      	adds	r2, r0, #1
 800370c:	d101      	bne.n	8003712 <__sflush_r+0x76>
 800370e:	682b      	ldr	r3, [r5, #0]
 8003710:	b903      	cbnz	r3, 8003714 <__sflush_r+0x78>
 8003712:	6560      	str	r0, [r4, #84]	@ 0x54
 8003714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003716:	602f      	str	r7, [r5, #0]
 8003718:	b1b9      	cbz	r1, 800374a <__sflush_r+0xae>
 800371a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800371e:	4299      	cmp	r1, r3
 8003720:	d002      	beq.n	8003728 <__sflush_r+0x8c>
 8003722:	4628      	mov	r0, r5
 8003724:	f7ff fbf4 	bl	8002f10 <_free_r>
 8003728:	2300      	movs	r3, #0
 800372a:	6363      	str	r3, [r4, #52]	@ 0x34
 800372c:	e00d      	b.n	800374a <__sflush_r+0xae>
 800372e:	2301      	movs	r3, #1
 8003730:	4628      	mov	r0, r5
 8003732:	47b0      	blx	r6
 8003734:	4602      	mov	r2, r0
 8003736:	1c50      	adds	r0, r2, #1
 8003738:	d1c9      	bne.n	80036ce <__sflush_r+0x32>
 800373a:	682b      	ldr	r3, [r5, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0c6      	beq.n	80036ce <__sflush_r+0x32>
 8003740:	2b1d      	cmp	r3, #29
 8003742:	d001      	beq.n	8003748 <__sflush_r+0xac>
 8003744:	2b16      	cmp	r3, #22
 8003746:	d11e      	bne.n	8003786 <__sflush_r+0xea>
 8003748:	602f      	str	r7, [r5, #0]
 800374a:	2000      	movs	r0, #0
 800374c:	e022      	b.n	8003794 <__sflush_r+0xf8>
 800374e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003752:	b21b      	sxth	r3, r3
 8003754:	e01b      	b.n	800378e <__sflush_r+0xf2>
 8003756:	690f      	ldr	r7, [r1, #16]
 8003758:	2f00      	cmp	r7, #0
 800375a:	d0f6      	beq.n	800374a <__sflush_r+0xae>
 800375c:	0793      	lsls	r3, r2, #30
 800375e:	680e      	ldr	r6, [r1, #0]
 8003760:	bf08      	it	eq
 8003762:	694b      	ldreq	r3, [r1, #20]
 8003764:	600f      	str	r7, [r1, #0]
 8003766:	bf18      	it	ne
 8003768:	2300      	movne	r3, #0
 800376a:	eba6 0807 	sub.w	r8, r6, r7
 800376e:	608b      	str	r3, [r1, #8]
 8003770:	f1b8 0f00 	cmp.w	r8, #0
 8003774:	dde9      	ble.n	800374a <__sflush_r+0xae>
 8003776:	6a21      	ldr	r1, [r4, #32]
 8003778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800377a:	4643      	mov	r3, r8
 800377c:	463a      	mov	r2, r7
 800377e:	4628      	mov	r0, r5
 8003780:	47b0      	blx	r6
 8003782:	2800      	cmp	r0, #0
 8003784:	dc08      	bgt.n	8003798 <__sflush_r+0xfc>
 8003786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	4407      	add	r7, r0
 800379a:	eba8 0800 	sub.w	r8, r8, r0
 800379e:	e7e7      	b.n	8003770 <__sflush_r+0xd4>
 80037a0:	20400001 	.word	0x20400001

080037a4 <_fflush_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	4605      	mov	r5, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	b913      	cbnz	r3, 80037b4 <_fflush_r+0x10>
 80037ae:	2500      	movs	r5, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	b118      	cbz	r0, 80037be <_fflush_r+0x1a>
 80037b6:	6a03      	ldr	r3, [r0, #32]
 80037b8:	b90b      	cbnz	r3, 80037be <_fflush_r+0x1a>
 80037ba:	f7ff faa1 	bl	8002d00 <__sinit>
 80037be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f3      	beq.n	80037ae <_fflush_r+0xa>
 80037c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037c8:	07d0      	lsls	r0, r2, #31
 80037ca:	d404      	bmi.n	80037d6 <_fflush_r+0x32>
 80037cc:	0599      	lsls	r1, r3, #22
 80037ce:	d402      	bmi.n	80037d6 <_fflush_r+0x32>
 80037d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037d2:	f7ff fb9a 	bl	8002f0a <__retarget_lock_acquire_recursive>
 80037d6:	4628      	mov	r0, r5
 80037d8:	4621      	mov	r1, r4
 80037da:	f7ff ff5f 	bl	800369c <__sflush_r>
 80037de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037e0:	07da      	lsls	r2, r3, #31
 80037e2:	4605      	mov	r5, r0
 80037e4:	d4e4      	bmi.n	80037b0 <_fflush_r+0xc>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	d4e1      	bmi.n	80037b0 <_fflush_r+0xc>
 80037ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ee:	f7ff fb8d 	bl	8002f0c <__retarget_lock_release_recursive>
 80037f2:	e7dd      	b.n	80037b0 <_fflush_r+0xc>

080037f4 <__swbuf_r>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	460e      	mov	r6, r1
 80037f8:	4614      	mov	r4, r2
 80037fa:	4605      	mov	r5, r0
 80037fc:	b118      	cbz	r0, 8003806 <__swbuf_r+0x12>
 80037fe:	6a03      	ldr	r3, [r0, #32]
 8003800:	b90b      	cbnz	r3, 8003806 <__swbuf_r+0x12>
 8003802:	f7ff fa7d 	bl	8002d00 <__sinit>
 8003806:	69a3      	ldr	r3, [r4, #24]
 8003808:	60a3      	str	r3, [r4, #8]
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	071a      	lsls	r2, r3, #28
 800380e:	d501      	bpl.n	8003814 <__swbuf_r+0x20>
 8003810:	6923      	ldr	r3, [r4, #16]
 8003812:	b943      	cbnz	r3, 8003826 <__swbuf_r+0x32>
 8003814:	4621      	mov	r1, r4
 8003816:	4628      	mov	r0, r5
 8003818:	f000 f82a 	bl	8003870 <__swsetup_r>
 800381c:	b118      	cbz	r0, 8003826 <__swbuf_r+0x32>
 800381e:	f04f 37ff 	mov.w	r7, #4294967295
 8003822:	4638      	mov	r0, r7
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	6922      	ldr	r2, [r4, #16]
 800382a:	1a98      	subs	r0, r3, r2
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	b2f6      	uxtb	r6, r6
 8003830:	4283      	cmp	r3, r0
 8003832:	4637      	mov	r7, r6
 8003834:	dc05      	bgt.n	8003842 <__swbuf_r+0x4e>
 8003836:	4621      	mov	r1, r4
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff ffb3 	bl	80037a4 <_fflush_r>
 800383e:	2800      	cmp	r0, #0
 8003840:	d1ed      	bne.n	800381e <__swbuf_r+0x2a>
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	701e      	strb	r6, [r3, #0]
 8003850:	6962      	ldr	r2, [r4, #20]
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	429a      	cmp	r2, r3
 8003856:	d004      	beq.n	8003862 <__swbuf_r+0x6e>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	07db      	lsls	r3, r3, #31
 800385c:	d5e1      	bpl.n	8003822 <__swbuf_r+0x2e>
 800385e:	2e0a      	cmp	r6, #10
 8003860:	d1df      	bne.n	8003822 <__swbuf_r+0x2e>
 8003862:	4621      	mov	r1, r4
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff ff9d 	bl	80037a4 <_fflush_r>
 800386a:	2800      	cmp	r0, #0
 800386c:	d0d9      	beq.n	8003822 <__swbuf_r+0x2e>
 800386e:	e7d6      	b.n	800381e <__swbuf_r+0x2a>

08003870 <__swsetup_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <__swsetup_r+0xa8>)
 8003874:	4605      	mov	r5, r0
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	460c      	mov	r4, r1
 800387a:	b118      	cbz	r0, 8003884 <__swsetup_r+0x14>
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	b90b      	cbnz	r3, 8003884 <__swsetup_r+0x14>
 8003880:	f7ff fa3e 	bl	8002d00 <__sinit>
 8003884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003888:	0719      	lsls	r1, r3, #28
 800388a:	d422      	bmi.n	80038d2 <__swsetup_r+0x62>
 800388c:	06da      	lsls	r2, r3, #27
 800388e:	d407      	bmi.n	80038a0 <__swsetup_r+0x30>
 8003890:	2209      	movs	r2, #9
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	e033      	b.n	8003908 <__swsetup_r+0x98>
 80038a0:	0758      	lsls	r0, r3, #29
 80038a2:	d512      	bpl.n	80038ca <__swsetup_r+0x5a>
 80038a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038a6:	b141      	cbz	r1, 80038ba <__swsetup_r+0x4a>
 80038a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d002      	beq.n	80038b6 <__swsetup_r+0x46>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f7ff fb2d 	bl	8002f10 <_free_r>
 80038b6:	2300      	movs	r3, #0
 80038b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	81a3      	strh	r3, [r4, #12]
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	b94b      	cbnz	r3, 80038ea <__swsetup_r+0x7a>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d003      	beq.n	80038ea <__swsetup_r+0x7a>
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 f84f 	bl	8003988 <__smakebuf_r>
 80038ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ee:	f013 0201 	ands.w	r2, r3, #1
 80038f2:	d00a      	beq.n	800390a <__swsetup_r+0x9a>
 80038f4:	2200      	movs	r2, #0
 80038f6:	60a2      	str	r2, [r4, #8]
 80038f8:	6962      	ldr	r2, [r4, #20]
 80038fa:	4252      	negs	r2, r2
 80038fc:	61a2      	str	r2, [r4, #24]
 80038fe:	6922      	ldr	r2, [r4, #16]
 8003900:	b942      	cbnz	r2, 8003914 <__swsetup_r+0xa4>
 8003902:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003906:	d1c5      	bne.n	8003894 <__swsetup_r+0x24>
 8003908:	bd38      	pop	{r3, r4, r5, pc}
 800390a:	0799      	lsls	r1, r3, #30
 800390c:	bf58      	it	pl
 800390e:	6962      	ldrpl	r2, [r4, #20]
 8003910:	60a2      	str	r2, [r4, #8]
 8003912:	e7f4      	b.n	80038fe <__swsetup_r+0x8e>
 8003914:	2000      	movs	r0, #0
 8003916:	e7f7      	b.n	8003908 <__swsetup_r+0x98>
 8003918:	20000018 	.word	0x20000018

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4d06      	ldr	r5, [pc, #24]	@ (8003938 <_sbrk_r+0x1c>)
 8003920:	2300      	movs	r3, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	f7fd f900 	bl	8000b2c <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2000025c 	.word	0x2000025c

0800393c <__swhatbuf_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	460c      	mov	r4, r1
 8003940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003944:	2900      	cmp	r1, #0
 8003946:	b096      	sub	sp, #88	@ 0x58
 8003948:	4615      	mov	r5, r2
 800394a:	461e      	mov	r6, r3
 800394c:	da0d      	bge.n	800396a <__swhatbuf_r+0x2e>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	bf14      	ite	ne
 800395a:	2340      	movne	r3, #64	@ 0x40
 800395c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003960:	2000      	movs	r0, #0
 8003962:	6031      	str	r1, [r6, #0]
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	b016      	add	sp, #88	@ 0x58
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	466a      	mov	r2, sp
 800396c:	f000 f848 	bl	8003a00 <_fstat_r>
 8003970:	2800      	cmp	r0, #0
 8003972:	dbec      	blt.n	800394e <__swhatbuf_r+0x12>
 8003974:	9901      	ldr	r1, [sp, #4]
 8003976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800397a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800397e:	4259      	negs	r1, r3
 8003980:	4159      	adcs	r1, r3
 8003982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003986:	e7eb      	b.n	8003960 <__swhatbuf_r+0x24>

08003988 <__smakebuf_r>:
 8003988:	898b      	ldrh	r3, [r1, #12]
 800398a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398c:	079d      	lsls	r5, r3, #30
 800398e:	4606      	mov	r6, r0
 8003990:	460c      	mov	r4, r1
 8003992:	d507      	bpl.n	80039a4 <__smakebuf_r+0x1c>
 8003994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2301      	movs	r3, #1
 800399e:	6163      	str	r3, [r4, #20]
 80039a0:	b003      	add	sp, #12
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a4:	ab01      	add	r3, sp, #4
 80039a6:	466a      	mov	r2, sp
 80039a8:	f7ff ffc8 	bl	800393c <__swhatbuf_r>
 80039ac:	9f00      	ldr	r7, [sp, #0]
 80039ae:	4605      	mov	r5, r0
 80039b0:	4639      	mov	r1, r7
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff fb18 	bl	8002fe8 <_malloc_r>
 80039b8:	b948      	cbnz	r0, 80039ce <__smakebuf_r+0x46>
 80039ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039be:	059a      	lsls	r2, r3, #22
 80039c0:	d4ee      	bmi.n	80039a0 <__smakebuf_r+0x18>
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	e7e2      	b.n	8003994 <__smakebuf_r+0xc>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	6020      	str	r0, [r4, #0]
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	9b01      	ldr	r3, [sp, #4]
 80039da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039de:	b15b      	cbz	r3, 80039f8 <__smakebuf_r+0x70>
 80039e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f81d 	bl	8003a24 <_isatty_r>
 80039ea:	b128      	cbz	r0, 80039f8 <__smakebuf_r+0x70>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	431d      	orrs	r5, r3
 80039fc:	81a5      	strh	r5, [r4, #12]
 80039fe:	e7cf      	b.n	80039a0 <__smakebuf_r+0x18>

08003a00 <_fstat_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4d07      	ldr	r5, [pc, #28]	@ (8003a20 <_fstat_r+0x20>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	f7fd f864 	bl	8000ada <_fstat>
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	d102      	bne.n	8003a1c <_fstat_r+0x1c>
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	b103      	cbz	r3, 8003a1c <_fstat_r+0x1c>
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000025c 	.word	0x2000025c

08003a24 <_isatty_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	@ (8003a40 <_isatty_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd f863 	bl	8000afa <_isatty>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_isatty_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_isatty_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	2000025c 	.word	0x2000025c

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
