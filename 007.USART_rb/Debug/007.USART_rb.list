
007.USART_rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d8  080034d8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  08003548  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003548  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000836b  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001811  00000000  00000000  0000d403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000582  00000000  00000000  0000f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016203  00000000  00000000  0000f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089df  00000000  00000000  00025aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d27  00000000  00000000  0002e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b51f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  000b5238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000b77e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003408 	.word	0x08003408

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003408 	.word	0x08003408

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fbc5 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f827 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8b9 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f88d 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <main+0x54>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68da      	ldr	r2, [r3, #12]
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <main+0x54>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f042 0220 	orr.w	r2, r2, #32
 80005d0:	60da      	str	r2, [r3, #12]
  if(RB_init(&gtUart2Fifo, 16))
 80005d2:	2110      	movs	r1, #16
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <main+0x58>)
 80005d6:	f000 f939 	bl	800084c <RB_init>
  /* USER CODE BEGIN WHILE */
  uint8_t ch;
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!RB_isempty(&gtUart2Fifo))
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <main+0x58>)
 80005dc:	f000 f9b2 	bl	8000944 <RB_isempty>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f9      	bne.n	80005da <main+0x2e>
	  {
		  ch = RB_read(&gtUart2Fifo);
 80005e6:	4807      	ldr	r0, [pc, #28]	@ (8000604 <main+0x58>)
 80005e8:	f000 f98b 	bl	8000902 <RB_read>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
		  HAL_UART_Transmit(&huart2, &ch, 1, 0xFF);
 80005f0:	1df9      	adds	r1, r7, #7
 80005f2:	23ff      	movs	r3, #255	@ 0xff
 80005f4:	2201      	movs	r2, #1
 80005f6:	4802      	ldr	r0, [pc, #8]	@ (8000600 <main+0x54>)
 80005f8:	f001 fbac 	bl	8001d54 <HAL_UART_Transmit>
	  if(!RB_isempty(&gtUart2Fifo))
 80005fc:	e7ed      	b.n	80005da <main+0x2e>
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	200000cc 	.word	0x200000cc

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f943 	bl	80028a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000680:	2340      	movs	r3, #64	@ 0x40
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe77 	bl	8001384 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800069c:	f000 f8d0 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f8d9 	bl	8001874 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f8ba 	bl	8000840 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	@ 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 face 	bl	8001cb4 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f88f 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000084 	.word	0x20000084
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <MX_GPIO_Init+0xd4>)
 80007bc:	f000 fdc8 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fc36 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xd4>)
 80007f4:	f000 fc28 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020800 	.word	0x40020800

0800080c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint8_t rx;
  if(huart->Instance == USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <HAL_UART_RxCpltCallback+0x2c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d108      	bne.n	8000830 <HAL_UART_RxCpltCallback+0x24>
  {
	  rx = (uint8_t)(huart->Instance->DR & (uint8_t) 0x00FF);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	73fb      	strb	r3, [r7, #15]
	  RB_write(&gtUart2Fifo, rx);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	@ (800083c <HAL_UART_RxCpltCallback+0x30>)
 800082c:	f000 f842 	bl	80008b4 <RB_write>
  }
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	200000cc 	.word	0x200000cc

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <RB_init>:
  * @param  ptRB
  					size
  * @retval unsigned int 0 ¼º°ø
  */
unsigned char RB_init(RingFifo_t * ptRB, unsigned short size)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]

    if(size & (size-1))
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	887b      	ldrh	r3, [r7, #2]
 800085c:	3b01      	subs	r3, #1
 800085e:	4013      	ands	r3, r2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <RB_init+0x1c>
      return 1;
 8000864:	2301      	movs	r3, #1
 8000866:	e01b      	b.n	80008a0 <RB_init+0x54>

		ptRB->size = size;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	887a      	ldrh	r2, [r7, #2]
 800086c:	801a      	strh	r2, [r3, #0]
		ptRB->wrIdx= 0;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	805a      	strh	r2, [r3, #2]
		ptRB->rdIdx= 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	809a      	strh	r2, [r3, #4]
		ptRB->data = malloc(size);
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fe43 	bl	8002508 <malloc>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]

    assert(ptRB->data);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <RB_init+0x52>
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <RB_init+0x5c>)
 8000894:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <RB_init+0x60>)
 8000896:	211f      	movs	r1, #31
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <RB_init+0x64>)
 800089a:	f001 fe17 	bl	80024cc <__assert_func>

		return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08003420 	.word	0x08003420
 80008ac:	08003440 	.word	0x08003440
 80008b0:	0800342c 	.word	0x0800342c

080008b4 <RB_write>:
		ptRB->rdIdx= 0;
		memset(ptRB->data, 0, ptRB->size);
}

void RB_write(RingFifo_t * ptRB, unsigned char data)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
  if(RB_isfull(ptRB))
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f852 	bl	800096a <RB_isfull>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d116      	bne.n	80008fa <RB_write+0x46>
    return;

	ptRB->data[ptRB->wrIdx] = data;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	8852      	ldrh	r2, [r2, #2]
 80008d4:	4413      	add	r3, r2
 80008d6:	78fa      	ldrb	r2, [r7, #3]
 80008d8:	701a      	strb	r2, [r3, #0]
	ptRB->wrIdx = (ptRB->size-1) & (ptRB->wrIdx+1);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	885b      	ldrh	r3, [r3, #2]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4013      	ands	r3, r2
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	805a      	strh	r2, [r3, #2]
 80008f8:	e000      	b.n	80008fc <RB_write+0x48>
    return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <RB_read>:

unsigned char RB_read(RingFifo_t * ptRB)
{
 8000902:	b480      	push	{r7}
 8000904:	b085      	sub	sp, #20
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]

	unsigned char val = ptRB->data[ptRB->rdIdx];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	8892      	ldrh	r2, [r2, #4]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	73fb      	strb	r3, [r7, #15]
	ptRB->rdIdx = (ptRB->size-1) & (ptRB->rdIdx+1);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	b29b      	uxth	r3, r3
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	889b      	ldrh	r3, [r3, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	b29b      	uxth	r3, r3
 800092a:	b21b      	sxth	r3, r3
 800092c:	4013      	ands	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	809a      	strh	r2, [r3, #4]

	return val;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <RB_isempty>:

unsigned char RB_isempty(RingFifo_t * ptRB)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	return (ptRB->rdIdx == ptRB->wrIdx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	889a      	ldrh	r2, [r3, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	885b      	ldrh	r3, [r3, #2]
 8000954:	429a      	cmp	r2, r3
 8000956:	bf0c      	ite	eq
 8000958:	2301      	moveq	r3, #1
 800095a:	2300      	movne	r3, #0
 800095c:	b2db      	uxtb	r3, r3
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <RB_isfull>:

unsigned char RB_isfull(RingFifo_t * ptRB)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	return ((ptRB->size-1) & ptRB->rdIdx) == ((ptRB->size-1) & (ptRB->wrIdx+1));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	3301      	adds	r3, #1
 800097e:	405a      	eors	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4013      	ands	r3, r2
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <HAL_UART_MspInit+0x94>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d133      	bne.n	8000a7a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_UART_MspInit+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <HAL_UART_MspInit+0x9c>)
 8000a66:	f000 faef 	bl	8001048 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2026      	movs	r0, #38	@ 0x26
 8000a70:	f000 fab3 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a74:	2026      	movs	r0, #38	@ 0x26
 8000a76:	f000 facc 	bl	8001012 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f97d 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE) != RESET))
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <USART2_IRQHandler+0x48>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d114      	bne.n	8000b2e <USART2_IRQHandler+0x3e>
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <USART2_IRQHandler+0x48>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00d      	beq.n	8000b2e <USART2_IRQHandler+0x3e>
  {
	  HAL_UART_RxCpltCallback(&huart2);
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <USART2_IRQHandler+0x48>)
 8000b14:	f7ff fe7a 	bl	800080c <HAL_UART_RxCpltCallback>
	  __HAL_UART_CLEAR_PEFLAG(&huart2);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <USART2_IRQHandler+0x48>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <USART2_IRQHandler+0x48>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000084 	.word	0x20000084

08000b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return 1;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_kill>:

int _kill(int pid, int sig)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b56:	f001 ff03 	bl	8002960 <__errno>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2216      	movs	r2, #22
 8000b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_exit>:

void _exit (int status)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ffe7 	bl	8000b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <_exit+0x12>

08000b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e00a      	b.n	8000baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b94:	f3af 8000 	nop.w
 8000b98:	4601      	mov	r1, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	60ba      	str	r2, [r7, #8]
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf0      	blt.n	8000b94 <_read+0x12>
  }

  return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e009      	b.n	8000be2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf1      	blt.n	8000bce <_write+0x12>
  }
  return len;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_close>:

int _close(int file)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_isatty>:

int _isatty(int file)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f001 fe68 	bl	8002960 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20018000 	.word	0x20018000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	200000d8 	.word	0x200000d8
 8000cc4:	20000230 	.word	0x20000230

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f001 fe27 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc45 	bl	80005ac <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d30:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 8000d34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d38:	2000022c 	.word	0x2000022c

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f92b 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fe14 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f943 	bl	800102e <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f90b 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000dc 	.word	0x200000dc

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e159      	b.n	8001318 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8148 	bne.w	8001312 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a2 	beq.w	8001312 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b57      	ldr	r3, [pc, #348]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a56      	ldr	r2, [pc, #344]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b54      	ldr	r3, [pc, #336]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_GPIO_Init+0x2ec>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a49      	ldr	r2, [pc, #292]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x202>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a48      	ldr	r2, [pc, #288]	@ (800133c <HAL_GPIO_Init+0x2f4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x1fe>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a47      	ldr	r2, [pc, #284]	@ (8001340 <HAL_GPIO_Init+0x2f8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x1fa>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a46      	ldr	r2, [pc, #280]	@ (8001344 <HAL_GPIO_Init+0x2fc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x1f6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <HAL_GPIO_Init+0x300>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x1f2>
 8001236:	2304      	movs	r3, #4
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x204>
 800123a:	2307      	movs	r3, #7
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x204>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x204>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x204>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x204>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	@ (8001334 <HAL_GPIO_Init+0x2ec>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <HAL_GPIO_Init+0x304>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <HAL_GPIO_Init+0x304>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_GPIO_Init+0x304>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1a      	ldr	r2, [pc, #104]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_GPIO_Init+0x304>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f aea2 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e267      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d075      	beq.n	800148e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013a2:	4b88      	ldr	r3, [pc, #544]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d00c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b85      	ldr	r3, [pc, #532]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ba:	4b82      	ldr	r3, [pc, #520]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013c6:	d10b      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4b7e      	ldr	r3, [pc, #504]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d05b      	beq.n	800148c <HAL_RCC_OscConfig+0x108>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d157      	bne.n	800148c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e242      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e8:	d106      	bne.n	80013f8 <HAL_RCC_OscConfig+0x74>
 80013ea:	4b76      	ldr	r3, [pc, #472]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a75      	ldr	r2, [pc, #468]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b70      	ldr	r3, [pc, #448]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6f      	ldr	r2, [pc, #444]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6d      	ldr	r3, [pc, #436]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6c      	ldr	r2, [pc, #432]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 800141c:	4b69      	ldr	r3, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a68      	ldr	r2, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b66      	ldr	r3, [pc, #408]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fce6 	bl	8000e0c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fce2 	bl	8000e0c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e207      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5b      	ldr	r3, [pc, #364]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xc0>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcd2 	bl	8000e0c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcce 	bl	8000e0c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1f3      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b51      	ldr	r3, [pc, #324]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0xe8>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800149a:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b47      	ldr	r3, [pc, #284]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c7      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4937      	ldr	r1, [pc, #220]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_RCC_OscConfig+0x244>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc87 	bl	8000e0c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc83 	bl	8000e0c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a8      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4925      	ldr	r1, [pc, #148]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_RCC_OscConfig+0x244>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fc66 	bl	8000e0c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc62 	bl	8000e0c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e187      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d016      	beq.n	80015a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_RCC_OscConfig+0x248>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fc46 	bl	8000e0c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fc42 	bl	8000e0c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e167      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x200>
 80015a2:	e01b      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_RCC_OscConfig+0x248>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fc2f 	bl	8000e0c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e00e      	b.n	80015d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc2b 	bl	8000e0c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d907      	bls.n	80015d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e150      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	42470000 	.word	0x42470000
 80015cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b88      	ldr	r3, [pc, #544]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ea      	bne.n	80015b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8097 	beq.w	8001718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b7d      	ldr	r3, [pc, #500]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a7c      	ldr	r2, [pc, #496]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b7a      	ldr	r3, [pc, #488]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b77      	ldr	r3, [pc, #476]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b74      	ldr	r3, [pc, #464]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a73      	ldr	r2, [pc, #460]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fbeb 	bl	8000e0c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fbe7 	bl	8000e0c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e10c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x2ea>
 8001660:	4b64      	ldr	r3, [pc, #400]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a63      	ldr	r2, [pc, #396]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x30c>
 8001676:	4b5f      	ldr	r3, [pc, #380]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	4a5e      	ldr	r2, [pc, #376]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6713      	str	r3, [r2, #112]	@ 0x70
 8001682:	4b5c      	ldr	r3, [pc, #368]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	4a5b      	ldr	r2, [pc, #364]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	@ 0x70
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 8001690:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a57      	ldr	r2, [pc, #348]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	4b55      	ldr	r3, [pc, #340]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a54      	ldr	r2, [pc, #336]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fbac 	bl	8000e0c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fba8 	bl	8000e0c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0cb      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	4b49      	ldr	r3, [pc, #292]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0ee      	beq.n	80016b8 <HAL_RCC_OscConfig+0x334>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb96 	bl	8000e0c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb92 	bl	8000e0c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0b5      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ee      	bne.n	80016e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a38      	ldr	r2, [pc, #224]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a1 	beq.w	8001864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d05c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d141      	bne.n	80017ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb66 	bl	8000e0c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fb62 	bl	8000e0c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e087      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	491b      	ldr	r1, [pc, #108]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fb3b 	bl	8000e0c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fb37 	bl	8000e0c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e05c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x416>
 80017b8:	e054      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb24 	bl	8000e0c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fb20 	bl	8000e0c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e045      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x444>
 80017e6:	e03d      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e038      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000
 80017fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x4ec>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d028      	beq.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d121      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d11a      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001838:	4293      	cmp	r3, r2
 800183a:	d111      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	3b01      	subs	r3, #1
 800184a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0cc      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b68      	ldr	r3, [pc, #416]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d90c      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a58      	ldr	r2, [pc, #352]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d044      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b3f      	ldr	r3, [pc, #252]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e067      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4934      	ldr	r1, [pc, #208]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fa52 	bl	8000e0c <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff fa4e 	bl	8000e0c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f9b2 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08003448 	.word	0x08003448
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b094      	sub	sp, #80	@ 0x50
 8001a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a58:	4b79      	ldr	r3, [pc, #484]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d00d      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	f200 80e1 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a72:	e0db      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a78:	e0db      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7e:	e0d8      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a80:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4621      	mov	r1, r4
 8001acc:	1a51      	subs	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	018b      	lsls	r3, r1, #6
 8001ae8:	4651      	mov	r1, sl
 8001aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aee:	4651      	mov	r1, sl
 8001af0:	018a      	lsls	r2, r1, #6
 8001af2:	4651      	mov	r1, sl
 8001af4:	ebb2 0801 	subs.w	r8, r2, r1
 8001af8:	4659      	mov	r1, fp
 8001afa:	eb63 0901 	sbc.w	r9, r3, r1
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	eb18 0303 	adds.w	r3, r8, r3
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	462b      	mov	r3, r5
 8001b20:	eb49 0303 	adc.w	r3, r9, r3
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b32:	4629      	mov	r1, r5
 8001b34:	024b      	lsls	r3, r1, #9
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	024a      	lsls	r2, r1, #9
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b50:	f7fe fb96 	bl	8000280 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b5c:	e058      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	2200      	movs	r2, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	4611      	mov	r1, r2
 8001b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b78:	4642      	mov	r2, r8
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0159      	lsls	r1, r3, #5
 8001b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8a:	0150      	lsls	r0, r2, #5
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4641      	mov	r1, r8
 8001b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b96:	4649      	mov	r1, r9
 8001b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	00eb      	lsls	r3, r5, #3
 8001bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc6:	00e2      	lsls	r2, r4, #3
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	18e3      	adds	r3, r4, r3
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	eb45 0303 	adc.w	r3, r5, r3
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be6:	4629      	mov	r1, r5
 8001be8:	028b      	lsls	r3, r1, #10
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	028a      	lsls	r2, r1, #10
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	61fa      	str	r2, [r7, #28]
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	f7fe fb3c 	bl	8000280 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3750      	adds	r7, #80	@ 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003458 	.word	0x08003458

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08003458 	.word	0x08003458

08001cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e042      	b.n	8001d4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fe88 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	@ 0x24
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f973 	bl	8001fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d175      	bne.n	8001e60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_UART_Transmit+0x2c>
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e06e      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d92:	f7ff f83b 	bl	8000e0c <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dac:	d108      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e003      	b.n	8001dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dc8:	e02e      	b.n	8001e28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f848 	bl	8001e6a <UART_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e03a      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e007      	b.n	8001e1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cb      	bne.n	8001dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	@ 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f814 	bl	8001e6a <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e006      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e7a:	e03b      	b.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	d037      	beq.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e84:	f7fe ffc2 	bl	8000e0c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	6a3a      	ldr	r2, [r7, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d302      	bcc.n	8001e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e03a      	b.n	8001f14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b80      	cmp	r3, #128	@ 0x80
 8001eb0:	d020      	beq.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d01d      	beq.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d116      	bne.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f81d 	bl	8001f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e00f      	b.n	8001f14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d0b4      	beq.n	8001e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b095      	sub	sp, #84	@ 0x54
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2e:	e853 3f00 	ldrex	r3, [r3]
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	330c      	adds	r3, #12
 8001f42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f44:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f4c:	e841 2300 	strex	r3, r2, [r1]
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e5      	bne.n	8001f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	e853 3f00 	ldrex	r3, [r3]
 8001f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3314      	adds	r3, #20
 8001f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f80:	e841 2300 	strex	r3, r2, [r1]
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e5      	bne.n	8001f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d119      	bne.n	8001fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	e853 3f00 	ldrex	r3, [r3]
 8001fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f023 0310 	bic.w	r3, r3, #16
 8001faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fb4:	61ba      	str	r2, [r7, #24]
 8001fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e5      	bne.n	8001f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fd6:	bf00      	nop
 8001fd8:	3754      	adds	r7, #84	@ 0x54
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe8:	b0c0      	sub	sp, #256	@ 0x100
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	ea40 0301 	orr.w	r3, r0, r1
 800200c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	431a      	orrs	r2, r3
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	431a      	orrs	r2, r3
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800203c:	f021 010c 	bic.w	r1, r1, #12
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800204a:	430b      	orrs	r3, r1
 800204c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205e:	6999      	ldr	r1, [r3, #24]
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	ea40 0301 	orr.w	r3, r0, r1
 800206a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b8f      	ldr	r3, [pc, #572]	@ (80022b0 <UART_SetConfig+0x2cc>)
 8002074:	429a      	cmp	r2, r3
 8002076:	d005      	beq.n	8002084 <UART_SetConfig+0xa0>
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b8d      	ldr	r3, [pc, #564]	@ (80022b4 <UART_SetConfig+0x2d0>)
 8002080:	429a      	cmp	r2, r3
 8002082:	d104      	bne.n	800208e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002084:	f7ff fe02 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800208c:	e003      	b.n	8002096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800208e:	f7ff fde9 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a0:	f040 810c 	bne.w	80022bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020a8:	2200      	movs	r2, #0
 80020aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020b6:	4622      	mov	r2, r4
 80020b8:	462b      	mov	r3, r5
 80020ba:	1891      	adds	r1, r2, r2
 80020bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020be:	415b      	adcs	r3, r3
 80020c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020c6:	4621      	mov	r1, r4
 80020c8:	eb12 0801 	adds.w	r8, r2, r1
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb43 0901 	adc.w	r9, r3, r1
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e6:	4690      	mov	r8, r2
 80020e8:	4699      	mov	r9, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	eb18 0303 	adds.w	r3, r8, r3
 80020f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020f4:	462b      	mov	r3, r5
 80020f6:	eb49 0303 	adc.w	r3, r9, r3
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800210a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800210e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002112:	460b      	mov	r3, r1
 8002114:	18db      	adds	r3, r3, r3
 8002116:	653b      	str	r3, [r7, #80]	@ 0x50
 8002118:	4613      	mov	r3, r2
 800211a:	eb42 0303 	adc.w	r3, r2, r3
 800211e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002128:	f7fe f8aa 	bl	8000280 <__aeabi_uldivmod>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4b61      	ldr	r3, [pc, #388]	@ (80022b8 <UART_SetConfig+0x2d4>)
 8002132:	fba3 2302 	umull	r2, r3, r3, r2
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	011c      	lsls	r4, r3, #4
 800213a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800213e:	2200      	movs	r2, #0
 8002140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800214c:	4642      	mov	r2, r8
 800214e:	464b      	mov	r3, r9
 8002150:	1891      	adds	r1, r2, r2
 8002152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002154:	415b      	adcs	r3, r3
 8002156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800215c:	4641      	mov	r1, r8
 800215e:	eb12 0a01 	adds.w	sl, r2, r1
 8002162:	4649      	mov	r1, r9
 8002164:	eb43 0b01 	adc.w	fp, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800217c:	4692      	mov	sl, r2
 800217e:	469b      	mov	fp, r3
 8002180:	4643      	mov	r3, r8
 8002182:	eb1a 0303 	adds.w	r3, sl, r3
 8002186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800218a:	464b      	mov	r3, r9
 800218c:	eb4b 0303 	adc.w	r3, fp, r3
 8002190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80021a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80021a8:	460b      	mov	r3, r1
 80021aa:	18db      	adds	r3, r3, r3
 80021ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80021ae:	4613      	mov	r3, r2
 80021b0:	eb42 0303 	adc.w	r3, r2, r3
 80021b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021be:	f7fe f85f 	bl	8000280 <__aeabi_uldivmod>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <UART_SetConfig+0x2d4>)
 80021ca:	fba3 2301 	umull	r2, r3, r3, r1
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2264      	movs	r2, #100	@ 0x64
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	1acb      	subs	r3, r1, r3
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021de:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <UART_SetConfig+0x2d4>)
 80021e0:	fba3 2302 	umull	r2, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021ec:	441c      	add	r4, r3
 80021ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	1891      	adds	r1, r2, r2
 8002206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002208:	415b      	adcs	r3, r3
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800220c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002210:	4641      	mov	r1, r8
 8002212:	1851      	adds	r1, r2, r1
 8002214:	6339      	str	r1, [r7, #48]	@ 0x30
 8002216:	4649      	mov	r1, r9
 8002218:	414b      	adcs	r3, r1
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002228:	4659      	mov	r1, fp
 800222a:	00cb      	lsls	r3, r1, #3
 800222c:	4651      	mov	r1, sl
 800222e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002232:	4651      	mov	r1, sl
 8002234:	00ca      	lsls	r2, r1, #3
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	4603      	mov	r3, r0
 800223c:	4642      	mov	r2, r8
 800223e:	189b      	adds	r3, r3, r2
 8002240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002244:	464b      	mov	r3, r9
 8002246:	460a      	mov	r2, r1
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800225c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002264:	460b      	mov	r3, r1
 8002266:	18db      	adds	r3, r3, r3
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226a:	4613      	mov	r3, r2
 800226c:	eb42 0303 	adc.w	r3, r2, r3
 8002270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800227a:	f7fe f801 	bl	8000280 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <UART_SetConfig+0x2d4>)
 8002284:	fba3 1302 	umull	r1, r3, r3, r2
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	2164      	movs	r1, #100	@ 0x64
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3332      	adds	r3, #50	@ 0x32
 8002296:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <UART_SetConfig+0x2d4>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	f003 0207 	and.w	r2, r3, #7
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4422      	add	r2, r4
 80022aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022ac:	e106      	b.n	80024bc <UART_SetConfig+0x4d8>
 80022ae:	bf00      	nop
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40011400 	.word	0x40011400
 80022b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022ce:	4642      	mov	r2, r8
 80022d0:	464b      	mov	r3, r9
 80022d2:	1891      	adds	r1, r2, r2
 80022d4:	6239      	str	r1, [r7, #32]
 80022d6:	415b      	adcs	r3, r3
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022de:	4641      	mov	r1, r8
 80022e0:	1854      	adds	r4, r2, r1
 80022e2:	4649      	mov	r1, r9
 80022e4:	eb43 0501 	adc.w	r5, r3, r1
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	00eb      	lsls	r3, r5, #3
 80022f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f6:	00e2      	lsls	r2, r4, #3
 80022f8:	4614      	mov	r4, r2
 80022fa:	461d      	mov	r5, r3
 80022fc:	4643      	mov	r3, r8
 80022fe:	18e3      	adds	r3, r4, r3
 8002300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002304:	464b      	mov	r3, r9
 8002306:	eb45 0303 	adc.w	r3, r5, r3
 800230a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800231a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800232a:	4629      	mov	r1, r5
 800232c:	008b      	lsls	r3, r1, #2
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002334:	4621      	mov	r1, r4
 8002336:	008a      	lsls	r2, r1, #2
 8002338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800233c:	f7fd ffa0 	bl	8000280 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4b60      	ldr	r3, [pc, #384]	@ (80024c8 <UART_SetConfig+0x4e4>)
 8002346:	fba3 2302 	umull	r2, r3, r3, r2
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	011c      	lsls	r4, r3, #4
 800234e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002352:	2200      	movs	r2, #0
 8002354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800235c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	1891      	adds	r1, r2, r2
 8002366:	61b9      	str	r1, [r7, #24]
 8002368:	415b      	adcs	r3, r3
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002370:	4641      	mov	r1, r8
 8002372:	1851      	adds	r1, r2, r1
 8002374:	6139      	str	r1, [r7, #16]
 8002376:	4649      	mov	r1, r9
 8002378:	414b      	adcs	r3, r1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002388:	4659      	mov	r1, fp
 800238a:	00cb      	lsls	r3, r1, #3
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002392:	4651      	mov	r1, sl
 8002394:	00ca      	lsls	r2, r1, #3
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	4603      	mov	r3, r0
 800239c:	4642      	mov	r2, r8
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023a4:	464b      	mov	r3, r9
 80023a6:	460a      	mov	r2, r1
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023c8:	4649      	mov	r1, r9
 80023ca:	008b      	lsls	r3, r1, #2
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d2:	4641      	mov	r1, r8
 80023d4:	008a      	lsls	r2, r1, #2
 80023d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023da:	f7fd ff51 	bl	8000280 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <UART_SetConfig+0x4e4>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2264      	movs	r2, #100	@ 0x64
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	1acb      	subs	r3, r1, r3
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	3332      	adds	r3, #50	@ 0x32
 80023f8:	4a33      	ldr	r2, [pc, #204]	@ (80024c8 <UART_SetConfig+0x4e4>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002404:	441c      	add	r4, r3
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800240a:	2200      	movs	r2, #0
 800240c:	673b      	str	r3, [r7, #112]	@ 0x70
 800240e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002414:	4642      	mov	r2, r8
 8002416:	464b      	mov	r3, r9
 8002418:	1891      	adds	r1, r2, r2
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	415b      	adcs	r3, r3
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002424:	4641      	mov	r1, r8
 8002426:	1851      	adds	r1, r2, r1
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	4649      	mov	r1, r9
 800242c:	414b      	adcs	r3, r1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800243c:	4659      	mov	r1, fp
 800243e:	00cb      	lsls	r3, r1, #3
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002446:	4651      	mov	r1, sl
 8002448:	00ca      	lsls	r2, r1, #3
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4603      	mov	r3, r0
 8002450:	4642      	mov	r2, r8
 8002452:	189b      	adds	r3, r3, r2
 8002454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002456:	464b      	mov	r3, r9
 8002458:	460a      	mov	r2, r1
 800245a:	eb42 0303 	adc.w	r3, r2, r3
 800245e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	663b      	str	r3, [r7, #96]	@ 0x60
 800246a:	667a      	str	r2, [r7, #100]	@ 0x64
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002478:	4649      	mov	r1, r9
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	4641      	mov	r1, r8
 800247e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002482:	4641      	mov	r1, r8
 8002484:	008a      	lsls	r2, r1, #2
 8002486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800248a:	f7fd fef9 	bl	8000280 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <UART_SetConfig+0x4e4>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	@ 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	3332      	adds	r3, #50	@ 0x32
 80024a6:	4a08      	ldr	r2, [pc, #32]	@ (80024c8 <UART_SetConfig+0x4e4>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	f003 020f 	and.w	r2, r3, #15
 80024b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4422      	add	r2, r4
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024c2:	46bd      	mov	sp, r7
 80024c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c8:	51eb851f 	.word	0x51eb851f

080024cc <__assert_func>:
 80024cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024ce:	4614      	mov	r4, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <__assert_func+0x2c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4605      	mov	r5, r0
 80024d8:	68d8      	ldr	r0, [r3, #12]
 80024da:	b14c      	cbz	r4, 80024f0 <__assert_func+0x24>
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <__assert_func+0x30>)
 80024de:	9100      	str	r1, [sp, #0]
 80024e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80024e4:	4906      	ldr	r1, [pc, #24]	@ (8002500 <__assert_func+0x34>)
 80024e6:	462b      	mov	r3, r5
 80024e8:	f000 f968 	bl	80027bc <fiprintf>
 80024ec:	f000 fa65 	bl	80029ba <abort>
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <__assert_func+0x38>)
 80024f2:	461c      	mov	r4, r3
 80024f4:	e7f3      	b.n	80024de <__assert_func+0x12>
 80024f6:	bf00      	nop
 80024f8:	20000018 	.word	0x20000018
 80024fc:	08003460 	.word	0x08003460
 8002500:	0800346d 	.word	0x0800346d
 8002504:	0800349b 	.word	0x0800349b

08002508 <malloc>:
 8002508:	4b02      	ldr	r3, [pc, #8]	@ (8002514 <malloc+0xc>)
 800250a:	4601      	mov	r1, r0
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f000 b825 	b.w	800255c <_malloc_r>
 8002512:	bf00      	nop
 8002514:	20000018 	.word	0x20000018

08002518 <sbrk_aligned>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	4e0f      	ldr	r6, [pc, #60]	@ (8002558 <sbrk_aligned+0x40>)
 800251c:	460c      	mov	r4, r1
 800251e:	6831      	ldr	r1, [r6, #0]
 8002520:	4605      	mov	r5, r0
 8002522:	b911      	cbnz	r1, 800252a <sbrk_aligned+0x12>
 8002524:	f000 f9fa 	bl	800291c <_sbrk_r>
 8002528:	6030      	str	r0, [r6, #0]
 800252a:	4621      	mov	r1, r4
 800252c:	4628      	mov	r0, r5
 800252e:	f000 f9f5 	bl	800291c <_sbrk_r>
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	d103      	bne.n	800253e <sbrk_aligned+0x26>
 8002536:	f04f 34ff 	mov.w	r4, #4294967295
 800253a:	4620      	mov	r0, r4
 800253c:	bd70      	pop	{r4, r5, r6, pc}
 800253e:	1cc4      	adds	r4, r0, #3
 8002540:	f024 0403 	bic.w	r4, r4, #3
 8002544:	42a0      	cmp	r0, r4
 8002546:	d0f8      	beq.n	800253a <sbrk_aligned+0x22>
 8002548:	1a21      	subs	r1, r4, r0
 800254a:	4628      	mov	r0, r5
 800254c:	f000 f9e6 	bl	800291c <_sbrk_r>
 8002550:	3001      	adds	r0, #1
 8002552:	d1f2      	bne.n	800253a <sbrk_aligned+0x22>
 8002554:	e7ef      	b.n	8002536 <sbrk_aligned+0x1e>
 8002556:	bf00      	nop
 8002558:	200000e0 	.word	0x200000e0

0800255c <_malloc_r>:
 800255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002560:	1ccd      	adds	r5, r1, #3
 8002562:	f025 0503 	bic.w	r5, r5, #3
 8002566:	3508      	adds	r5, #8
 8002568:	2d0c      	cmp	r5, #12
 800256a:	bf38      	it	cc
 800256c:	250c      	movcc	r5, #12
 800256e:	2d00      	cmp	r5, #0
 8002570:	4606      	mov	r6, r0
 8002572:	db01      	blt.n	8002578 <_malloc_r+0x1c>
 8002574:	42a9      	cmp	r1, r5
 8002576:	d904      	bls.n	8002582 <_malloc_r+0x26>
 8002578:	230c      	movs	r3, #12
 800257a:	6033      	str	r3, [r6, #0]
 800257c:	2000      	movs	r0, #0
 800257e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002658 <_malloc_r+0xfc>
 8002586:	f000 f869 	bl	800265c <__malloc_lock>
 800258a:	f8d8 3000 	ldr.w	r3, [r8]
 800258e:	461c      	mov	r4, r3
 8002590:	bb44      	cbnz	r4, 80025e4 <_malloc_r+0x88>
 8002592:	4629      	mov	r1, r5
 8002594:	4630      	mov	r0, r6
 8002596:	f7ff ffbf 	bl	8002518 <sbrk_aligned>
 800259a:	1c43      	adds	r3, r0, #1
 800259c:	4604      	mov	r4, r0
 800259e:	d158      	bne.n	8002652 <_malloc_r+0xf6>
 80025a0:	f8d8 4000 	ldr.w	r4, [r8]
 80025a4:	4627      	mov	r7, r4
 80025a6:	2f00      	cmp	r7, #0
 80025a8:	d143      	bne.n	8002632 <_malloc_r+0xd6>
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d04b      	beq.n	8002646 <_malloc_r+0xea>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	4639      	mov	r1, r7
 80025b2:	4630      	mov	r0, r6
 80025b4:	eb04 0903 	add.w	r9, r4, r3
 80025b8:	f000 f9b0 	bl	800291c <_sbrk_r>
 80025bc:	4581      	cmp	r9, r0
 80025be:	d142      	bne.n	8002646 <_malloc_r+0xea>
 80025c0:	6821      	ldr	r1, [r4, #0]
 80025c2:	1a6d      	subs	r5, r5, r1
 80025c4:	4629      	mov	r1, r5
 80025c6:	4630      	mov	r0, r6
 80025c8:	f7ff ffa6 	bl	8002518 <sbrk_aligned>
 80025cc:	3001      	adds	r0, #1
 80025ce:	d03a      	beq.n	8002646 <_malloc_r+0xea>
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	442b      	add	r3, r5
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	f8d8 3000 	ldr.w	r3, [r8]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	bb62      	cbnz	r2, 8002638 <_malloc_r+0xdc>
 80025de:	f8c8 7000 	str.w	r7, [r8]
 80025e2:	e00f      	b.n	8002604 <_malloc_r+0xa8>
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	1b52      	subs	r2, r2, r5
 80025e8:	d420      	bmi.n	800262c <_malloc_r+0xd0>
 80025ea:	2a0b      	cmp	r2, #11
 80025ec:	d917      	bls.n	800261e <_malloc_r+0xc2>
 80025ee:	1961      	adds	r1, r4, r5
 80025f0:	42a3      	cmp	r3, r4
 80025f2:	6025      	str	r5, [r4, #0]
 80025f4:	bf18      	it	ne
 80025f6:	6059      	strne	r1, [r3, #4]
 80025f8:	6863      	ldr	r3, [r4, #4]
 80025fa:	bf08      	it	eq
 80025fc:	f8c8 1000 	streq.w	r1, [r8]
 8002600:	5162      	str	r2, [r4, r5]
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	4630      	mov	r0, r6
 8002606:	f000 f82f 	bl	8002668 <__malloc_unlock>
 800260a:	f104 000b 	add.w	r0, r4, #11
 800260e:	1d23      	adds	r3, r4, #4
 8002610:	f020 0007 	bic.w	r0, r0, #7
 8002614:	1ac2      	subs	r2, r0, r3
 8002616:	bf1c      	itt	ne
 8002618:	1a1b      	subne	r3, r3, r0
 800261a:	50a3      	strne	r3, [r4, r2]
 800261c:	e7af      	b.n	800257e <_malloc_r+0x22>
 800261e:	6862      	ldr	r2, [r4, #4]
 8002620:	42a3      	cmp	r3, r4
 8002622:	bf0c      	ite	eq
 8002624:	f8c8 2000 	streq.w	r2, [r8]
 8002628:	605a      	strne	r2, [r3, #4]
 800262a:	e7eb      	b.n	8002604 <_malloc_r+0xa8>
 800262c:	4623      	mov	r3, r4
 800262e:	6864      	ldr	r4, [r4, #4]
 8002630:	e7ae      	b.n	8002590 <_malloc_r+0x34>
 8002632:	463c      	mov	r4, r7
 8002634:	687f      	ldr	r7, [r7, #4]
 8002636:	e7b6      	b.n	80025a6 <_malloc_r+0x4a>
 8002638:	461a      	mov	r2, r3
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	42a3      	cmp	r3, r4
 800263e:	d1fb      	bne.n	8002638 <_malloc_r+0xdc>
 8002640:	2300      	movs	r3, #0
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e7de      	b.n	8002604 <_malloc_r+0xa8>
 8002646:	230c      	movs	r3, #12
 8002648:	6033      	str	r3, [r6, #0]
 800264a:	4630      	mov	r0, r6
 800264c:	f000 f80c 	bl	8002668 <__malloc_unlock>
 8002650:	e794      	b.n	800257c <_malloc_r+0x20>
 8002652:	6005      	str	r5, [r0, #0]
 8002654:	e7d6      	b.n	8002604 <_malloc_r+0xa8>
 8002656:	bf00      	nop
 8002658:	200000e4 	.word	0x200000e4

0800265c <__malloc_lock>:
 800265c:	4801      	ldr	r0, [pc, #4]	@ (8002664 <__malloc_lock+0x8>)
 800265e:	f000 b9aa 	b.w	80029b6 <__retarget_lock_acquire_recursive>
 8002662:	bf00      	nop
 8002664:	20000228 	.word	0x20000228

08002668 <__malloc_unlock>:
 8002668:	4801      	ldr	r0, [pc, #4]	@ (8002670 <__malloc_unlock+0x8>)
 800266a:	f000 b9a5 	b.w	80029b8 <__retarget_lock_release_recursive>
 800266e:	bf00      	nop
 8002670:	20000228 	.word	0x20000228

08002674 <std>:
 8002674:	2300      	movs	r3, #0
 8002676:	b510      	push	{r4, lr}
 8002678:	4604      	mov	r4, r0
 800267a:	e9c0 3300 	strd	r3, r3, [r0]
 800267e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002682:	6083      	str	r3, [r0, #8]
 8002684:	8181      	strh	r1, [r0, #12]
 8002686:	6643      	str	r3, [r0, #100]	@ 0x64
 8002688:	81c2      	strh	r2, [r0, #14]
 800268a:	6183      	str	r3, [r0, #24]
 800268c:	4619      	mov	r1, r3
 800268e:	2208      	movs	r2, #8
 8002690:	305c      	adds	r0, #92	@ 0x5c
 8002692:	f000 f906 	bl	80028a2 <memset>
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <std+0x58>)
 8002698:	6263      	str	r3, [r4, #36]	@ 0x24
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <std+0x5c>)
 800269c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <std+0x60>)
 80026a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <std+0x64>)
 80026a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <std+0x68>)
 80026a8:	6224      	str	r4, [r4, #32]
 80026aa:	429c      	cmp	r4, r3
 80026ac:	d006      	beq.n	80026bc <std+0x48>
 80026ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80026b2:	4294      	cmp	r4, r2
 80026b4:	d002      	beq.n	80026bc <std+0x48>
 80026b6:	33d0      	adds	r3, #208	@ 0xd0
 80026b8:	429c      	cmp	r4, r3
 80026ba:	d105      	bne.n	80026c8 <std+0x54>
 80026bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80026c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c4:	f000 b976 	b.w	80029b4 <__retarget_lock_init_recursive>
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	bf00      	nop
 80026cc:	0800281d 	.word	0x0800281d
 80026d0:	0800283f 	.word	0x0800283f
 80026d4:	08002877 	.word	0x08002877
 80026d8:	0800289b 	.word	0x0800289b
 80026dc:	200000e8 	.word	0x200000e8

080026e0 <stdio_exit_handler>:
 80026e0:	4a02      	ldr	r2, [pc, #8]	@ (80026ec <stdio_exit_handler+0xc>)
 80026e2:	4903      	ldr	r1, [pc, #12]	@ (80026f0 <stdio_exit_handler+0x10>)
 80026e4:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <stdio_exit_handler+0x14>)
 80026e6:	f000 b87b 	b.w	80027e0 <_fwalk_sglue>
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	08003101 	.word	0x08003101
 80026f4:	2000001c 	.word	0x2000001c

080026f8 <cleanup_stdio>:
 80026f8:	6841      	ldr	r1, [r0, #4]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <cleanup_stdio+0x34>)
 80026fc:	4299      	cmp	r1, r3
 80026fe:	b510      	push	{r4, lr}
 8002700:	4604      	mov	r4, r0
 8002702:	d001      	beq.n	8002708 <cleanup_stdio+0x10>
 8002704:	f000 fcfc 	bl	8003100 <_fflush_r>
 8002708:	68a1      	ldr	r1, [r4, #8]
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <cleanup_stdio+0x38>)
 800270c:	4299      	cmp	r1, r3
 800270e:	d002      	beq.n	8002716 <cleanup_stdio+0x1e>
 8002710:	4620      	mov	r0, r4
 8002712:	f000 fcf5 	bl	8003100 <_fflush_r>
 8002716:	68e1      	ldr	r1, [r4, #12]
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <cleanup_stdio+0x3c>)
 800271a:	4299      	cmp	r1, r3
 800271c:	d004      	beq.n	8002728 <cleanup_stdio+0x30>
 800271e:	4620      	mov	r0, r4
 8002720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002724:	f000 bcec 	b.w	8003100 <_fflush_r>
 8002728:	bd10      	pop	{r4, pc}
 800272a:	bf00      	nop
 800272c:	200000e8 	.word	0x200000e8
 8002730:	20000150 	.word	0x20000150
 8002734:	200001b8 	.word	0x200001b8

08002738 <global_stdio_init.part.0>:
 8002738:	b510      	push	{r4, lr}
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <global_stdio_init.part.0+0x30>)
 800273c:	4c0b      	ldr	r4, [pc, #44]	@ (800276c <global_stdio_init.part.0+0x34>)
 800273e:	4a0c      	ldr	r2, [pc, #48]	@ (8002770 <global_stdio_init.part.0+0x38>)
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	4620      	mov	r0, r4
 8002744:	2200      	movs	r2, #0
 8002746:	2104      	movs	r1, #4
 8002748:	f7ff ff94 	bl	8002674 <std>
 800274c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002750:	2201      	movs	r2, #1
 8002752:	2109      	movs	r1, #9
 8002754:	f7ff ff8e 	bl	8002674 <std>
 8002758:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800275c:	2202      	movs	r2, #2
 800275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002762:	2112      	movs	r1, #18
 8002764:	f7ff bf86 	b.w	8002674 <std>
 8002768:	20000220 	.word	0x20000220
 800276c:	200000e8 	.word	0x200000e8
 8002770:	080026e1 	.word	0x080026e1

08002774 <__sfp_lock_acquire>:
 8002774:	4801      	ldr	r0, [pc, #4]	@ (800277c <__sfp_lock_acquire+0x8>)
 8002776:	f000 b91e 	b.w	80029b6 <__retarget_lock_acquire_recursive>
 800277a:	bf00      	nop
 800277c:	20000229 	.word	0x20000229

08002780 <__sfp_lock_release>:
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <__sfp_lock_release+0x8>)
 8002782:	f000 b919 	b.w	80029b8 <__retarget_lock_release_recursive>
 8002786:	bf00      	nop
 8002788:	20000229 	.word	0x20000229

0800278c <__sinit>:
 800278c:	b510      	push	{r4, lr}
 800278e:	4604      	mov	r4, r0
 8002790:	f7ff fff0 	bl	8002774 <__sfp_lock_acquire>
 8002794:	6a23      	ldr	r3, [r4, #32]
 8002796:	b11b      	cbz	r3, 80027a0 <__sinit+0x14>
 8002798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279c:	f7ff bff0 	b.w	8002780 <__sfp_lock_release>
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <__sinit+0x28>)
 80027a2:	6223      	str	r3, [r4, #32]
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__sinit+0x2c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f5      	bne.n	8002798 <__sinit+0xc>
 80027ac:	f7ff ffc4 	bl	8002738 <global_stdio_init.part.0>
 80027b0:	e7f2      	b.n	8002798 <__sinit+0xc>
 80027b2:	bf00      	nop
 80027b4:	080026f9 	.word	0x080026f9
 80027b8:	20000220 	.word	0x20000220

080027bc <fiprintf>:
 80027bc:	b40e      	push	{r1, r2, r3}
 80027be:	b503      	push	{r0, r1, lr}
 80027c0:	4601      	mov	r1, r0
 80027c2:	ab03      	add	r3, sp, #12
 80027c4:	4805      	ldr	r0, [pc, #20]	@ (80027dc <fiprintf+0x20>)
 80027c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f000 f96f 	bl	8002ab0 <_vfiprintf_r>
 80027d2:	b002      	add	sp, #8
 80027d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d8:	b003      	add	sp, #12
 80027da:	4770      	bx	lr
 80027dc:	20000018 	.word	0x20000018

080027e0 <_fwalk_sglue>:
 80027e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027e4:	4607      	mov	r7, r0
 80027e6:	4688      	mov	r8, r1
 80027e8:	4614      	mov	r4, r2
 80027ea:	2600      	movs	r6, #0
 80027ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027f0:	f1b9 0901 	subs.w	r9, r9, #1
 80027f4:	d505      	bpl.n	8002802 <_fwalk_sglue+0x22>
 80027f6:	6824      	ldr	r4, [r4, #0]
 80027f8:	2c00      	cmp	r4, #0
 80027fa:	d1f7      	bne.n	80027ec <_fwalk_sglue+0xc>
 80027fc:	4630      	mov	r0, r6
 80027fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002802:	89ab      	ldrh	r3, [r5, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d907      	bls.n	8002818 <_fwalk_sglue+0x38>
 8002808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800280c:	3301      	adds	r3, #1
 800280e:	d003      	beq.n	8002818 <_fwalk_sglue+0x38>
 8002810:	4629      	mov	r1, r5
 8002812:	4638      	mov	r0, r7
 8002814:	47c0      	blx	r8
 8002816:	4306      	orrs	r6, r0
 8002818:	3568      	adds	r5, #104	@ 0x68
 800281a:	e7e9      	b.n	80027f0 <_fwalk_sglue+0x10>

0800281c <__sread>:
 800281c:	b510      	push	{r4, lr}
 800281e:	460c      	mov	r4, r1
 8002820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002824:	f000 f868 	bl	80028f8 <_read_r>
 8002828:	2800      	cmp	r0, #0
 800282a:	bfab      	itete	ge
 800282c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800282e:	89a3      	ldrhlt	r3, [r4, #12]
 8002830:	181b      	addge	r3, r3, r0
 8002832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002836:	bfac      	ite	ge
 8002838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800283a:	81a3      	strhlt	r3, [r4, #12]
 800283c:	bd10      	pop	{r4, pc}

0800283e <__swrite>:
 800283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002842:	461f      	mov	r7, r3
 8002844:	898b      	ldrh	r3, [r1, #12]
 8002846:	05db      	lsls	r3, r3, #23
 8002848:	4605      	mov	r5, r0
 800284a:	460c      	mov	r4, r1
 800284c:	4616      	mov	r6, r2
 800284e:	d505      	bpl.n	800285c <__swrite+0x1e>
 8002850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002854:	2302      	movs	r3, #2
 8002856:	2200      	movs	r2, #0
 8002858:	f000 f83c 	bl	80028d4 <_lseek_r>
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	4632      	mov	r2, r6
 800286a:	463b      	mov	r3, r7
 800286c:	4628      	mov	r0, r5
 800286e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002872:	f000 b863 	b.w	800293c <_write_r>

08002876 <__sseek>:
 8002876:	b510      	push	{r4, lr}
 8002878:	460c      	mov	r4, r1
 800287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287e:	f000 f829 	bl	80028d4 <_lseek_r>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	bf15      	itete	ne
 8002888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800288a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800288e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002892:	81a3      	strheq	r3, [r4, #12]
 8002894:	bf18      	it	ne
 8002896:	81a3      	strhne	r3, [r4, #12]
 8002898:	bd10      	pop	{r4, pc}

0800289a <__sclose>:
 800289a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800289e:	f000 b809 	b.w	80028b4 <_close_r>

080028a2 <memset>:
 80028a2:	4402      	add	r2, r0
 80028a4:	4603      	mov	r3, r0
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d100      	bne.n	80028ac <memset+0xa>
 80028aa:	4770      	bx	lr
 80028ac:	f803 1b01 	strb.w	r1, [r3], #1
 80028b0:	e7f9      	b.n	80028a6 <memset+0x4>
	...

080028b4 <_close_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d06      	ldr	r5, [pc, #24]	@ (80028d0 <_close_r+0x1c>)
 80028b8:	2300      	movs	r3, #0
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	f7fe f998 	bl	8000bf4 <_close>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_close_r+0x1a>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_close_r+0x1a>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	20000224 	.word	0x20000224

080028d4 <_lseek_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4d07      	ldr	r5, [pc, #28]	@ (80028f4 <_lseek_r+0x20>)
 80028d8:	4604      	mov	r4, r0
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	602a      	str	r2, [r5, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7fe f9ad 	bl	8000c42 <_lseek>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d102      	bne.n	80028f2 <_lseek_r+0x1e>
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	b103      	cbz	r3, 80028f2 <_lseek_r+0x1e>
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	20000224 	.word	0x20000224

080028f8 <_read_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4d07      	ldr	r5, [pc, #28]	@ (8002918 <_read_r+0x20>)
 80028fc:	4604      	mov	r4, r0
 80028fe:	4608      	mov	r0, r1
 8002900:	4611      	mov	r1, r2
 8002902:	2200      	movs	r2, #0
 8002904:	602a      	str	r2, [r5, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	f7fe f93b 	bl	8000b82 <_read>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d102      	bne.n	8002916 <_read_r+0x1e>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b103      	cbz	r3, 8002916 <_read_r+0x1e>
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	bd38      	pop	{r3, r4, r5, pc}
 8002918:	20000224 	.word	0x20000224

0800291c <_sbrk_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4d06      	ldr	r5, [pc, #24]	@ (8002938 <_sbrk_r+0x1c>)
 8002920:	2300      	movs	r3, #0
 8002922:	4604      	mov	r4, r0
 8002924:	4608      	mov	r0, r1
 8002926:	602b      	str	r3, [r5, #0]
 8002928:	f7fe f998 	bl	8000c5c <_sbrk>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d102      	bne.n	8002936 <_sbrk_r+0x1a>
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	b103      	cbz	r3, 8002936 <_sbrk_r+0x1a>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	20000224 	.word	0x20000224

0800293c <_write_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4d07      	ldr	r5, [pc, #28]	@ (800295c <_write_r+0x20>)
 8002940:	4604      	mov	r4, r0
 8002942:	4608      	mov	r0, r1
 8002944:	4611      	mov	r1, r2
 8002946:	2200      	movs	r2, #0
 8002948:	602a      	str	r2, [r5, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	f7fe f936 	bl	8000bbc <_write>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_write_r+0x1e>
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	b103      	cbz	r3, 800295a <_write_r+0x1e>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	20000224 	.word	0x20000224

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	@ (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000018 	.word	0x20000018

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4d0d      	ldr	r5, [pc, #52]	@ (80029a4 <__libc_init_array+0x38>)
 8002970:	4c0d      	ldr	r4, [pc, #52]	@ (80029a8 <__libc_init_array+0x3c>)
 8002972:	1b64      	subs	r4, r4, r5
 8002974:	10a4      	asrs	r4, r4, #2
 8002976:	2600      	movs	r6, #0
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	4d0b      	ldr	r5, [pc, #44]	@ (80029ac <__libc_init_array+0x40>)
 800297e:	4c0c      	ldr	r4, [pc, #48]	@ (80029b0 <__libc_init_array+0x44>)
 8002980:	f000 fd42 	bl	8003408 <_init>
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	2600      	movs	r6, #0
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	080034d8 	.word	0x080034d8
 80029a8:	080034d8 	.word	0x080034d8
 80029ac:	080034d8 	.word	0x080034d8
 80029b0:	080034dc 	.word	0x080034dc

080029b4 <__retarget_lock_init_recursive>:
 80029b4:	4770      	bx	lr

080029b6 <__retarget_lock_acquire_recursive>:
 80029b6:	4770      	bx	lr

080029b8 <__retarget_lock_release_recursive>:
 80029b8:	4770      	bx	lr

080029ba <abort>:
 80029ba:	b508      	push	{r3, lr}
 80029bc:	2006      	movs	r0, #6
 80029be:	f000 fc83 	bl	80032c8 <raise>
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fe f8d2 	bl	8000b6c <_exit>

080029c8 <_free_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4605      	mov	r5, r0
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d041      	beq.n	8002a54 <_free_r+0x8c>
 80029d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d4:	1f0c      	subs	r4, r1, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bfb8      	it	lt
 80029da:	18e4      	addlt	r4, r4, r3
 80029dc:	f7ff fe3e 	bl	800265c <__malloc_lock>
 80029e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a58 <_free_r+0x90>)
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	b933      	cbnz	r3, 80029f4 <_free_r+0x2c>
 80029e6:	6063      	str	r3, [r4, #4]
 80029e8:	6014      	str	r4, [r2, #0]
 80029ea:	4628      	mov	r0, r5
 80029ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029f0:	f7ff be3a 	b.w	8002668 <__malloc_unlock>
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d908      	bls.n	8002a0a <_free_r+0x42>
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	1821      	adds	r1, r4, r0
 80029fc:	428b      	cmp	r3, r1
 80029fe:	bf01      	itttt	eq
 8002a00:	6819      	ldreq	r1, [r3, #0]
 8002a02:	685b      	ldreq	r3, [r3, #4]
 8002a04:	1809      	addeq	r1, r1, r0
 8002a06:	6021      	streq	r1, [r4, #0]
 8002a08:	e7ed      	b.n	80029e6 <_free_r+0x1e>
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b10b      	cbz	r3, 8002a14 <_free_r+0x4c>
 8002a10:	42a3      	cmp	r3, r4
 8002a12:	d9fa      	bls.n	8002a0a <_free_r+0x42>
 8002a14:	6811      	ldr	r1, [r2, #0]
 8002a16:	1850      	adds	r0, r2, r1
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d10b      	bne.n	8002a34 <_free_r+0x6c>
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	4401      	add	r1, r0
 8002a20:	1850      	adds	r0, r2, r1
 8002a22:	4283      	cmp	r3, r0
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	d1e0      	bne.n	80029ea <_free_r+0x22>
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	6053      	str	r3, [r2, #4]
 8002a2e:	4408      	add	r0, r1
 8002a30:	6010      	str	r0, [r2, #0]
 8002a32:	e7da      	b.n	80029ea <_free_r+0x22>
 8002a34:	d902      	bls.n	8002a3c <_free_r+0x74>
 8002a36:	230c      	movs	r3, #12
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	e7d6      	b.n	80029ea <_free_r+0x22>
 8002a3c:	6820      	ldr	r0, [r4, #0]
 8002a3e:	1821      	adds	r1, r4, r0
 8002a40:	428b      	cmp	r3, r1
 8002a42:	bf04      	itt	eq
 8002a44:	6819      	ldreq	r1, [r3, #0]
 8002a46:	685b      	ldreq	r3, [r3, #4]
 8002a48:	6063      	str	r3, [r4, #4]
 8002a4a:	bf04      	itt	eq
 8002a4c:	1809      	addeq	r1, r1, r0
 8002a4e:	6021      	streq	r1, [r4, #0]
 8002a50:	6054      	str	r4, [r2, #4]
 8002a52:	e7ca      	b.n	80029ea <_free_r+0x22>
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	bf00      	nop
 8002a58:	200000e4 	.word	0x200000e4

08002a5c <__sfputc_r>:
 8002a5c:	6893      	ldr	r3, [r2, #8]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	b410      	push	{r4}
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	da08      	bge.n	8002a7a <__sfputc_r+0x1e>
 8002a68:	6994      	ldr	r4, [r2, #24]
 8002a6a:	42a3      	cmp	r3, r4
 8002a6c:	db01      	blt.n	8002a72 <__sfputc_r+0x16>
 8002a6e:	290a      	cmp	r1, #10
 8002a70:	d103      	bne.n	8002a7a <__sfputc_r+0x1e>
 8002a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a76:	f000 bb6b 	b.w	8003150 <__swbuf_r>
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	1c58      	adds	r0, r3, #1
 8002a7e:	6010      	str	r0, [r2, #0]
 8002a80:	7019      	strb	r1, [r3, #0]
 8002a82:	4608      	mov	r0, r1
 8002a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <__sfputs_r>:
 8002a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	460f      	mov	r7, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	18d5      	adds	r5, r2, r3
 8002a94:	42ac      	cmp	r4, r5
 8002a96:	d101      	bne.n	8002a9c <__sfputs_r+0x12>
 8002a98:	2000      	movs	r0, #0
 8002a9a:	e007      	b.n	8002aac <__sfputs_r+0x22>
 8002a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aa0:	463a      	mov	r2, r7
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff ffda 	bl	8002a5c <__sfputc_r>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d1f3      	bne.n	8002a94 <__sfputs_r+0xa>
 8002aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ab0 <_vfiprintf_r>:
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	460d      	mov	r5, r1
 8002ab6:	b09d      	sub	sp, #116	@ 0x74
 8002ab8:	4614      	mov	r4, r2
 8002aba:	4698      	mov	r8, r3
 8002abc:	4606      	mov	r6, r0
 8002abe:	b118      	cbz	r0, 8002ac8 <_vfiprintf_r+0x18>
 8002ac0:	6a03      	ldr	r3, [r0, #32]
 8002ac2:	b90b      	cbnz	r3, 8002ac8 <_vfiprintf_r+0x18>
 8002ac4:	f7ff fe62 	bl	800278c <__sinit>
 8002ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002aca:	07d9      	lsls	r1, r3, #31
 8002acc:	d405      	bmi.n	8002ada <_vfiprintf_r+0x2a>
 8002ace:	89ab      	ldrh	r3, [r5, #12]
 8002ad0:	059a      	lsls	r2, r3, #22
 8002ad2:	d402      	bmi.n	8002ada <_vfiprintf_r+0x2a>
 8002ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ad6:	f7ff ff6e 	bl	80029b6 <__retarget_lock_acquire_recursive>
 8002ada:	89ab      	ldrh	r3, [r5, #12]
 8002adc:	071b      	lsls	r3, r3, #28
 8002ade:	d501      	bpl.n	8002ae4 <_vfiprintf_r+0x34>
 8002ae0:	692b      	ldr	r3, [r5, #16]
 8002ae2:	b99b      	cbnz	r3, 8002b0c <_vfiprintf_r+0x5c>
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f000 fb70 	bl	80031cc <__swsetup_r>
 8002aec:	b170      	cbz	r0, 8002b0c <_vfiprintf_r+0x5c>
 8002aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002af0:	07dc      	lsls	r4, r3, #31
 8002af2:	d504      	bpl.n	8002afe <_vfiprintf_r+0x4e>
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	b01d      	add	sp, #116	@ 0x74
 8002afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002afe:	89ab      	ldrh	r3, [r5, #12]
 8002b00:	0598      	lsls	r0, r3, #22
 8002b02:	d4f7      	bmi.n	8002af4 <_vfiprintf_r+0x44>
 8002b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b06:	f7ff ff57 	bl	80029b8 <__retarget_lock_release_recursive>
 8002b0a:	e7f3      	b.n	8002af4 <_vfiprintf_r+0x44>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b10:	2320      	movs	r3, #32
 8002b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b1a:	2330      	movs	r3, #48	@ 0x30
 8002b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ccc <_vfiprintf_r+0x21c>
 8002b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b24:	f04f 0901 	mov.w	r9, #1
 8002b28:	4623      	mov	r3, r4
 8002b2a:	469a      	mov	sl, r3
 8002b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b30:	b10a      	cbz	r2, 8002b36 <_vfiprintf_r+0x86>
 8002b32:	2a25      	cmp	r2, #37	@ 0x25
 8002b34:	d1f9      	bne.n	8002b2a <_vfiprintf_r+0x7a>
 8002b36:	ebba 0b04 	subs.w	fp, sl, r4
 8002b3a:	d00b      	beq.n	8002b54 <_vfiprintf_r+0xa4>
 8002b3c:	465b      	mov	r3, fp
 8002b3e:	4622      	mov	r2, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	4630      	mov	r0, r6
 8002b44:	f7ff ffa1 	bl	8002a8a <__sfputs_r>
 8002b48:	3001      	adds	r0, #1
 8002b4a:	f000 80a7 	beq.w	8002c9c <_vfiprintf_r+0x1ec>
 8002b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b50:	445a      	add	r2, fp
 8002b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b54:	f89a 3000 	ldrb.w	r3, [sl]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 809f 	beq.w	8002c9c <_vfiprintf_r+0x1ec>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b68:	f10a 0a01 	add.w	sl, sl, #1
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	9307      	str	r3, [sp, #28]
 8002b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b76:	4654      	mov	r4, sl
 8002b78:	2205      	movs	r2, #5
 8002b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b7e:	4853      	ldr	r0, [pc, #332]	@ (8002ccc <_vfiprintf_r+0x21c>)
 8002b80:	f7fd fb2e 	bl	80001e0 <memchr>
 8002b84:	9a04      	ldr	r2, [sp, #16]
 8002b86:	b9d8      	cbnz	r0, 8002bc0 <_vfiprintf_r+0x110>
 8002b88:	06d1      	lsls	r1, r2, #27
 8002b8a:	bf44      	itt	mi
 8002b8c:	2320      	movmi	r3, #32
 8002b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b92:	0713      	lsls	r3, r2, #28
 8002b94:	bf44      	itt	mi
 8002b96:	232b      	movmi	r3, #43	@ 0x2b
 8002b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ba2:	d015      	beq.n	8002bd0 <_vfiprintf_r+0x120>
 8002ba4:	9a07      	ldr	r2, [sp, #28]
 8002ba6:	4654      	mov	r4, sl
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f04f 0c0a 	mov.w	ip, #10
 8002bae:	4621      	mov	r1, r4
 8002bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bb4:	3b30      	subs	r3, #48	@ 0x30
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d94b      	bls.n	8002c52 <_vfiprintf_r+0x1a2>
 8002bba:	b1b0      	cbz	r0, 8002bea <_vfiprintf_r+0x13a>
 8002bbc:	9207      	str	r2, [sp, #28]
 8002bbe:	e014      	b.n	8002bea <_vfiprintf_r+0x13a>
 8002bc0:	eba0 0308 	sub.w	r3, r0, r8
 8002bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	46a2      	mov	sl, r4
 8002bce:	e7d2      	b.n	8002b76 <_vfiprintf_r+0xc6>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	1d19      	adds	r1, r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	9103      	str	r1, [sp, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bfbb      	ittet	lt
 8002bdc:	425b      	neglt	r3, r3
 8002bde:	f042 0202 	orrlt.w	r2, r2, #2
 8002be2:	9307      	strge	r3, [sp, #28]
 8002be4:	9307      	strlt	r3, [sp, #28]
 8002be6:	bfb8      	it	lt
 8002be8:	9204      	strlt	r2, [sp, #16]
 8002bea:	7823      	ldrb	r3, [r4, #0]
 8002bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bee:	d10a      	bne.n	8002c06 <_vfiprintf_r+0x156>
 8002bf0:	7863      	ldrb	r3, [r4, #1]
 8002bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bf4:	d132      	bne.n	8002c5c <_vfiprintf_r+0x1ac>
 8002bf6:	9b03      	ldr	r3, [sp, #12]
 8002bf8:	1d1a      	adds	r2, r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	9203      	str	r2, [sp, #12]
 8002bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c02:	3402      	adds	r4, #2
 8002c04:	9305      	str	r3, [sp, #20]
 8002c06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002cdc <_vfiprintf_r+0x22c>
 8002c0a:	7821      	ldrb	r1, [r4, #0]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4650      	mov	r0, sl
 8002c10:	f7fd fae6 	bl	80001e0 <memchr>
 8002c14:	b138      	cbz	r0, 8002c26 <_vfiprintf_r+0x176>
 8002c16:	9b04      	ldr	r3, [sp, #16]
 8002c18:	eba0 000a 	sub.w	r0, r0, sl
 8002c1c:	2240      	movs	r2, #64	@ 0x40
 8002c1e:	4082      	lsls	r2, r0
 8002c20:	4313      	orrs	r3, r2
 8002c22:	3401      	adds	r4, #1
 8002c24:	9304      	str	r3, [sp, #16]
 8002c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c2a:	4829      	ldr	r0, [pc, #164]	@ (8002cd0 <_vfiprintf_r+0x220>)
 8002c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c30:	2206      	movs	r2, #6
 8002c32:	f7fd fad5 	bl	80001e0 <memchr>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d03f      	beq.n	8002cba <_vfiprintf_r+0x20a>
 8002c3a:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <_vfiprintf_r+0x224>)
 8002c3c:	bb1b      	cbnz	r3, 8002c86 <_vfiprintf_r+0x1d6>
 8002c3e:	9b03      	ldr	r3, [sp, #12]
 8002c40:	3307      	adds	r3, #7
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	3308      	adds	r3, #8
 8002c48:	9303      	str	r3, [sp, #12]
 8002c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c4c:	443b      	add	r3, r7
 8002c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c50:	e76a      	b.n	8002b28 <_vfiprintf_r+0x78>
 8002c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c56:	460c      	mov	r4, r1
 8002c58:	2001      	movs	r0, #1
 8002c5a:	e7a8      	b.n	8002bae <_vfiprintf_r+0xfe>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	3401      	adds	r4, #1
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 0c0a 	mov.w	ip, #10
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c6e:	3a30      	subs	r2, #48	@ 0x30
 8002c70:	2a09      	cmp	r2, #9
 8002c72:	d903      	bls.n	8002c7c <_vfiprintf_r+0x1cc>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0c6      	beq.n	8002c06 <_vfiprintf_r+0x156>
 8002c78:	9105      	str	r1, [sp, #20]
 8002c7a:	e7c4      	b.n	8002c06 <_vfiprintf_r+0x156>
 8002c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c80:	4604      	mov	r4, r0
 8002c82:	2301      	movs	r3, #1
 8002c84:	e7f0      	b.n	8002c68 <_vfiprintf_r+0x1b8>
 8002c86:	ab03      	add	r3, sp, #12
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	462a      	mov	r2, r5
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <_vfiprintf_r+0x228>)
 8002c8e:	a904      	add	r1, sp, #16
 8002c90:	4630      	mov	r0, r6
 8002c92:	f3af 8000 	nop.w
 8002c96:	4607      	mov	r7, r0
 8002c98:	1c78      	adds	r0, r7, #1
 8002c9a:	d1d6      	bne.n	8002c4a <_vfiprintf_r+0x19a>
 8002c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c9e:	07d9      	lsls	r1, r3, #31
 8002ca0:	d405      	bmi.n	8002cae <_vfiprintf_r+0x1fe>
 8002ca2:	89ab      	ldrh	r3, [r5, #12]
 8002ca4:	059a      	lsls	r2, r3, #22
 8002ca6:	d402      	bmi.n	8002cae <_vfiprintf_r+0x1fe>
 8002ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002caa:	f7ff fe85 	bl	80029b8 <__retarget_lock_release_recursive>
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	065b      	lsls	r3, r3, #25
 8002cb2:	f53f af1f 	bmi.w	8002af4 <_vfiprintf_r+0x44>
 8002cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002cb8:	e71e      	b.n	8002af8 <_vfiprintf_r+0x48>
 8002cba:	ab03      	add	r3, sp, #12
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	462a      	mov	r2, r5
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <_vfiprintf_r+0x228>)
 8002cc2:	a904      	add	r1, sp, #16
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f000 f879 	bl	8002dbc <_printf_i>
 8002cca:	e7e4      	b.n	8002c96 <_vfiprintf_r+0x1e6>
 8002ccc:	0800349c 	.word	0x0800349c
 8002cd0:	080034a6 	.word	0x080034a6
 8002cd4:	00000000 	.word	0x00000000
 8002cd8:	08002a8b 	.word	0x08002a8b
 8002cdc:	080034a2 	.word	0x080034a2

08002ce0 <_printf_common>:
 8002ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce4:	4616      	mov	r6, r2
 8002ce6:	4698      	mov	r8, r3
 8002ce8:	688a      	ldr	r2, [r1, #8]
 8002cea:	690b      	ldr	r3, [r1, #16]
 8002cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bfb8      	it	lt
 8002cf4:	4613      	movlt	r3, r2
 8002cf6:	6033      	str	r3, [r6, #0]
 8002cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002cfc:	4607      	mov	r7, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	b10a      	cbz	r2, 8002d06 <_printf_common+0x26>
 8002d02:	3301      	adds	r3, #1
 8002d04:	6033      	str	r3, [r6, #0]
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	0699      	lsls	r1, r3, #26
 8002d0a:	bf42      	ittt	mi
 8002d0c:	6833      	ldrmi	r3, [r6, #0]
 8002d0e:	3302      	addmi	r3, #2
 8002d10:	6033      	strmi	r3, [r6, #0]
 8002d12:	6825      	ldr	r5, [r4, #0]
 8002d14:	f015 0506 	ands.w	r5, r5, #6
 8002d18:	d106      	bne.n	8002d28 <_printf_common+0x48>
 8002d1a:	f104 0a19 	add.w	sl, r4, #25
 8002d1e:	68e3      	ldr	r3, [r4, #12]
 8002d20:	6832      	ldr	r2, [r6, #0]
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	42ab      	cmp	r3, r5
 8002d26:	dc26      	bgt.n	8002d76 <_printf_common+0x96>
 8002d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	3b00      	subs	r3, #0
 8002d30:	bf18      	it	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	0692      	lsls	r2, r2, #26
 8002d36:	d42b      	bmi.n	8002d90 <_printf_common+0xb0>
 8002d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	4638      	mov	r0, r7
 8002d40:	47c8      	blx	r9
 8002d42:	3001      	adds	r0, #1
 8002d44:	d01e      	beq.n	8002d84 <_printf_common+0xa4>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	6922      	ldr	r2, [r4, #16]
 8002d4a:	f003 0306 	and.w	r3, r3, #6
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf02      	ittt	eq
 8002d52:	68e5      	ldreq	r5, [r4, #12]
 8002d54:	6833      	ldreq	r3, [r6, #0]
 8002d56:	1aed      	subeq	r5, r5, r3
 8002d58:	68a3      	ldr	r3, [r4, #8]
 8002d5a:	bf0c      	ite	eq
 8002d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d60:	2500      	movne	r5, #0
 8002d62:	4293      	cmp	r3, r2
 8002d64:	bfc4      	itt	gt
 8002d66:	1a9b      	subgt	r3, r3, r2
 8002d68:	18ed      	addgt	r5, r5, r3
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	341a      	adds	r4, #26
 8002d6e:	42b5      	cmp	r5, r6
 8002d70:	d11a      	bne.n	8002da8 <_printf_common+0xc8>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e008      	b.n	8002d88 <_printf_common+0xa8>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4652      	mov	r2, sl
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	47c8      	blx	r9
 8002d80:	3001      	adds	r0, #1
 8002d82:	d103      	bne.n	8002d8c <_printf_common+0xac>
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8c:	3501      	adds	r5, #1
 8002d8e:	e7c6      	b.n	8002d1e <_printf_common+0x3e>
 8002d90:	18e1      	adds	r1, r4, r3
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	2030      	movs	r0, #48	@ 0x30
 8002d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d9a:	4422      	add	r2, r4
 8002d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002da4:	3302      	adds	r3, #2
 8002da6:	e7c7      	b.n	8002d38 <_printf_common+0x58>
 8002da8:	2301      	movs	r3, #1
 8002daa:	4622      	mov	r2, r4
 8002dac:	4641      	mov	r1, r8
 8002dae:	4638      	mov	r0, r7
 8002db0:	47c8      	blx	r9
 8002db2:	3001      	adds	r0, #1
 8002db4:	d0e6      	beq.n	8002d84 <_printf_common+0xa4>
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7d9      	b.n	8002d6e <_printf_common+0x8e>
	...

08002dbc <_printf_i>:
 8002dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	7e0f      	ldrb	r7, [r1, #24]
 8002dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002dc4:	2f78      	cmp	r7, #120	@ 0x78
 8002dc6:	4691      	mov	r9, r2
 8002dc8:	4680      	mov	r8, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	469a      	mov	sl, r3
 8002dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002dd2:	d807      	bhi.n	8002de4 <_printf_i+0x28>
 8002dd4:	2f62      	cmp	r7, #98	@ 0x62
 8002dd6:	d80a      	bhi.n	8002dee <_printf_i+0x32>
 8002dd8:	2f00      	cmp	r7, #0
 8002dda:	f000 80d1 	beq.w	8002f80 <_printf_i+0x1c4>
 8002dde:	2f58      	cmp	r7, #88	@ 0x58
 8002de0:	f000 80b8 	beq.w	8002f54 <_printf_i+0x198>
 8002de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002dec:	e03a      	b.n	8002e64 <_printf_i+0xa8>
 8002dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002df2:	2b15      	cmp	r3, #21
 8002df4:	d8f6      	bhi.n	8002de4 <_printf_i+0x28>
 8002df6:	a101      	add	r1, pc, #4	@ (adr r1, 8002dfc <_printf_i+0x40>)
 8002df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dfc:	08002e55 	.word	0x08002e55
 8002e00:	08002e69 	.word	0x08002e69
 8002e04:	08002de5 	.word	0x08002de5
 8002e08:	08002de5 	.word	0x08002de5
 8002e0c:	08002de5 	.word	0x08002de5
 8002e10:	08002de5 	.word	0x08002de5
 8002e14:	08002e69 	.word	0x08002e69
 8002e18:	08002de5 	.word	0x08002de5
 8002e1c:	08002de5 	.word	0x08002de5
 8002e20:	08002de5 	.word	0x08002de5
 8002e24:	08002de5 	.word	0x08002de5
 8002e28:	08002f67 	.word	0x08002f67
 8002e2c:	08002e93 	.word	0x08002e93
 8002e30:	08002f21 	.word	0x08002f21
 8002e34:	08002de5 	.word	0x08002de5
 8002e38:	08002de5 	.word	0x08002de5
 8002e3c:	08002f89 	.word	0x08002f89
 8002e40:	08002de5 	.word	0x08002de5
 8002e44:	08002e93 	.word	0x08002e93
 8002e48:	08002de5 	.word	0x08002de5
 8002e4c:	08002de5 	.word	0x08002de5
 8002e50:	08002f29 	.word	0x08002f29
 8002e54:	6833      	ldr	r3, [r6, #0]
 8002e56:	1d1a      	adds	r2, r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6032      	str	r2, [r6, #0]
 8002e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e64:	2301      	movs	r3, #1
 8002e66:	e09c      	b.n	8002fa2 <_printf_i+0x1e6>
 8002e68:	6833      	ldr	r3, [r6, #0]
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	1d19      	adds	r1, r3, #4
 8002e6e:	6031      	str	r1, [r6, #0]
 8002e70:	0606      	lsls	r6, r0, #24
 8002e72:	d501      	bpl.n	8002e78 <_printf_i+0xbc>
 8002e74:	681d      	ldr	r5, [r3, #0]
 8002e76:	e003      	b.n	8002e80 <_printf_i+0xc4>
 8002e78:	0645      	lsls	r5, r0, #25
 8002e7a:	d5fb      	bpl.n	8002e74 <_printf_i+0xb8>
 8002e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	da03      	bge.n	8002e8c <_printf_i+0xd0>
 8002e84:	232d      	movs	r3, #45	@ 0x2d
 8002e86:	426d      	negs	r5, r5
 8002e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e8c:	4858      	ldr	r0, [pc, #352]	@ (8002ff0 <_printf_i+0x234>)
 8002e8e:	230a      	movs	r3, #10
 8002e90:	e011      	b.n	8002eb6 <_printf_i+0xfa>
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	0608      	lsls	r0, r1, #24
 8002e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e9c:	d402      	bmi.n	8002ea4 <_printf_i+0xe8>
 8002e9e:	0649      	lsls	r1, r1, #25
 8002ea0:	bf48      	it	mi
 8002ea2:	b2ad      	uxthmi	r5, r5
 8002ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ea6:	4852      	ldr	r0, [pc, #328]	@ (8002ff0 <_printf_i+0x234>)
 8002ea8:	6033      	str	r3, [r6, #0]
 8002eaa:	bf14      	ite	ne
 8002eac:	230a      	movne	r3, #10
 8002eae:	2308      	moveq	r3, #8
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002eb6:	6866      	ldr	r6, [r4, #4]
 8002eb8:	60a6      	str	r6, [r4, #8]
 8002eba:	2e00      	cmp	r6, #0
 8002ebc:	db05      	blt.n	8002eca <_printf_i+0x10e>
 8002ebe:	6821      	ldr	r1, [r4, #0]
 8002ec0:	432e      	orrs	r6, r5
 8002ec2:	f021 0104 	bic.w	r1, r1, #4
 8002ec6:	6021      	str	r1, [r4, #0]
 8002ec8:	d04b      	beq.n	8002f62 <_printf_i+0x1a6>
 8002eca:	4616      	mov	r6, r2
 8002ecc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ed0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ed4:	5dc7      	ldrb	r7, [r0, r7]
 8002ed6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002eda:	462f      	mov	r7, r5
 8002edc:	42bb      	cmp	r3, r7
 8002ede:	460d      	mov	r5, r1
 8002ee0:	d9f4      	bls.n	8002ecc <_printf_i+0x110>
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10b      	bne.n	8002efe <_printf_i+0x142>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	07df      	lsls	r7, r3, #31
 8002eea:	d508      	bpl.n	8002efe <_printf_i+0x142>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	6861      	ldr	r1, [r4, #4]
 8002ef0:	4299      	cmp	r1, r3
 8002ef2:	bfde      	ittt	le
 8002ef4:	2330      	movle	r3, #48	@ 0x30
 8002ef6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002efa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002efe:	1b92      	subs	r2, r2, r6
 8002f00:	6122      	str	r2, [r4, #16]
 8002f02:	f8cd a000 	str.w	sl, [sp]
 8002f06:	464b      	mov	r3, r9
 8002f08:	aa03      	add	r2, sp, #12
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	f7ff fee7 	bl	8002ce0 <_printf_common>
 8002f12:	3001      	adds	r0, #1
 8002f14:	d14a      	bne.n	8002fac <_printf_i+0x1f0>
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	b004      	add	sp, #16
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	f043 0320 	orr.w	r3, r3, #32
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	4832      	ldr	r0, [pc, #200]	@ (8002ff4 <_printf_i+0x238>)
 8002f2a:	2778      	movs	r7, #120	@ 0x78
 8002f2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	6831      	ldr	r1, [r6, #0]
 8002f34:	061f      	lsls	r7, r3, #24
 8002f36:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f3a:	d402      	bmi.n	8002f42 <_printf_i+0x186>
 8002f3c:	065f      	lsls	r7, r3, #25
 8002f3e:	bf48      	it	mi
 8002f40:	b2ad      	uxthmi	r5, r5
 8002f42:	6031      	str	r1, [r6, #0]
 8002f44:	07d9      	lsls	r1, r3, #31
 8002f46:	bf44      	itt	mi
 8002f48:	f043 0320 	orrmi.w	r3, r3, #32
 8002f4c:	6023      	strmi	r3, [r4, #0]
 8002f4e:	b11d      	cbz	r5, 8002f58 <_printf_i+0x19c>
 8002f50:	2310      	movs	r3, #16
 8002f52:	e7ad      	b.n	8002eb0 <_printf_i+0xf4>
 8002f54:	4826      	ldr	r0, [pc, #152]	@ (8002ff0 <_printf_i+0x234>)
 8002f56:	e7e9      	b.n	8002f2c <_printf_i+0x170>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	f023 0320 	bic.w	r3, r3, #32
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	e7f6      	b.n	8002f50 <_printf_i+0x194>
 8002f62:	4616      	mov	r6, r2
 8002f64:	e7bd      	b.n	8002ee2 <_printf_i+0x126>
 8002f66:	6833      	ldr	r3, [r6, #0]
 8002f68:	6825      	ldr	r5, [r4, #0]
 8002f6a:	6961      	ldr	r1, [r4, #20]
 8002f6c:	1d18      	adds	r0, r3, #4
 8002f6e:	6030      	str	r0, [r6, #0]
 8002f70:	062e      	lsls	r6, r5, #24
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	d501      	bpl.n	8002f7a <_printf_i+0x1be>
 8002f76:	6019      	str	r1, [r3, #0]
 8002f78:	e002      	b.n	8002f80 <_printf_i+0x1c4>
 8002f7a:	0668      	lsls	r0, r5, #25
 8002f7c:	d5fb      	bpl.n	8002f76 <_printf_i+0x1ba>
 8002f7e:	8019      	strh	r1, [r3, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	4616      	mov	r6, r2
 8002f86:	e7bc      	b.n	8002f02 <_printf_i+0x146>
 8002f88:	6833      	ldr	r3, [r6, #0]
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	6032      	str	r2, [r6, #0]
 8002f8e:	681e      	ldr	r6, [r3, #0]
 8002f90:	6862      	ldr	r2, [r4, #4]
 8002f92:	2100      	movs	r1, #0
 8002f94:	4630      	mov	r0, r6
 8002f96:	f7fd f923 	bl	80001e0 <memchr>
 8002f9a:	b108      	cbz	r0, 8002fa0 <_printf_i+0x1e4>
 8002f9c:	1b80      	subs	r0, r0, r6
 8002f9e:	6060      	str	r0, [r4, #4]
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002faa:	e7aa      	b.n	8002f02 <_printf_i+0x146>
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	4632      	mov	r2, r6
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	47d0      	blx	sl
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d0ad      	beq.n	8002f16 <_printf_i+0x15a>
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	079b      	lsls	r3, r3, #30
 8002fbe:	d413      	bmi.n	8002fe8 <_printf_i+0x22c>
 8002fc0:	68e0      	ldr	r0, [r4, #12]
 8002fc2:	9b03      	ldr	r3, [sp, #12]
 8002fc4:	4298      	cmp	r0, r3
 8002fc6:	bfb8      	it	lt
 8002fc8:	4618      	movlt	r0, r3
 8002fca:	e7a6      	b.n	8002f1a <_printf_i+0x15e>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4632      	mov	r2, r6
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	47d0      	blx	sl
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d09d      	beq.n	8002f16 <_printf_i+0x15a>
 8002fda:	3501      	adds	r5, #1
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	9903      	ldr	r1, [sp, #12]
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	42ab      	cmp	r3, r5
 8002fe4:	dcf2      	bgt.n	8002fcc <_printf_i+0x210>
 8002fe6:	e7eb      	b.n	8002fc0 <_printf_i+0x204>
 8002fe8:	2500      	movs	r5, #0
 8002fea:	f104 0619 	add.w	r6, r4, #25
 8002fee:	e7f5      	b.n	8002fdc <_printf_i+0x220>
 8002ff0:	080034ad 	.word	0x080034ad
 8002ff4:	080034be 	.word	0x080034be

08002ff8 <__sflush_r>:
 8002ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003000:	0716      	lsls	r6, r2, #28
 8003002:	4605      	mov	r5, r0
 8003004:	460c      	mov	r4, r1
 8003006:	d454      	bmi.n	80030b2 <__sflush_r+0xba>
 8003008:	684b      	ldr	r3, [r1, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	dc02      	bgt.n	8003014 <__sflush_r+0x1c>
 800300e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	dd48      	ble.n	80030a6 <__sflush_r+0xae>
 8003014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003016:	2e00      	cmp	r6, #0
 8003018:	d045      	beq.n	80030a6 <__sflush_r+0xae>
 800301a:	2300      	movs	r3, #0
 800301c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003020:	682f      	ldr	r7, [r5, #0]
 8003022:	6a21      	ldr	r1, [r4, #32]
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	d030      	beq.n	800308a <__sflush_r+0x92>
 8003028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	0759      	lsls	r1, r3, #29
 800302e:	d505      	bpl.n	800303c <__sflush_r+0x44>
 8003030:	6863      	ldr	r3, [r4, #4]
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003036:	b10b      	cbz	r3, 800303c <__sflush_r+0x44>
 8003038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	2300      	movs	r3, #0
 800303e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003040:	6a21      	ldr	r1, [r4, #32]
 8003042:	4628      	mov	r0, r5
 8003044:	47b0      	blx	r6
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	d106      	bne.n	800305a <__sflush_r+0x62>
 800304c:	6829      	ldr	r1, [r5, #0]
 800304e:	291d      	cmp	r1, #29
 8003050:	d82b      	bhi.n	80030aa <__sflush_r+0xb2>
 8003052:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <__sflush_r+0x104>)
 8003054:	40ca      	lsrs	r2, r1
 8003056:	07d6      	lsls	r6, r2, #31
 8003058:	d527      	bpl.n	80030aa <__sflush_r+0xb2>
 800305a:	2200      	movs	r2, #0
 800305c:	6062      	str	r2, [r4, #4]
 800305e:	04d9      	lsls	r1, r3, #19
 8003060:	6922      	ldr	r2, [r4, #16]
 8003062:	6022      	str	r2, [r4, #0]
 8003064:	d504      	bpl.n	8003070 <__sflush_r+0x78>
 8003066:	1c42      	adds	r2, r0, #1
 8003068:	d101      	bne.n	800306e <__sflush_r+0x76>
 800306a:	682b      	ldr	r3, [r5, #0]
 800306c:	b903      	cbnz	r3, 8003070 <__sflush_r+0x78>
 800306e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003072:	602f      	str	r7, [r5, #0]
 8003074:	b1b9      	cbz	r1, 80030a6 <__sflush_r+0xae>
 8003076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800307a:	4299      	cmp	r1, r3
 800307c:	d002      	beq.n	8003084 <__sflush_r+0x8c>
 800307e:	4628      	mov	r0, r5
 8003080:	f7ff fca2 	bl	80029c8 <_free_r>
 8003084:	2300      	movs	r3, #0
 8003086:	6363      	str	r3, [r4, #52]	@ 0x34
 8003088:	e00d      	b.n	80030a6 <__sflush_r+0xae>
 800308a:	2301      	movs	r3, #1
 800308c:	4628      	mov	r0, r5
 800308e:	47b0      	blx	r6
 8003090:	4602      	mov	r2, r0
 8003092:	1c50      	adds	r0, r2, #1
 8003094:	d1c9      	bne.n	800302a <__sflush_r+0x32>
 8003096:	682b      	ldr	r3, [r5, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0c6      	beq.n	800302a <__sflush_r+0x32>
 800309c:	2b1d      	cmp	r3, #29
 800309e:	d001      	beq.n	80030a4 <__sflush_r+0xac>
 80030a0:	2b16      	cmp	r3, #22
 80030a2:	d11e      	bne.n	80030e2 <__sflush_r+0xea>
 80030a4:	602f      	str	r7, [r5, #0]
 80030a6:	2000      	movs	r0, #0
 80030a8:	e022      	b.n	80030f0 <__sflush_r+0xf8>
 80030aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	e01b      	b.n	80030ea <__sflush_r+0xf2>
 80030b2:	690f      	ldr	r7, [r1, #16]
 80030b4:	2f00      	cmp	r7, #0
 80030b6:	d0f6      	beq.n	80030a6 <__sflush_r+0xae>
 80030b8:	0793      	lsls	r3, r2, #30
 80030ba:	680e      	ldr	r6, [r1, #0]
 80030bc:	bf08      	it	eq
 80030be:	694b      	ldreq	r3, [r1, #20]
 80030c0:	600f      	str	r7, [r1, #0]
 80030c2:	bf18      	it	ne
 80030c4:	2300      	movne	r3, #0
 80030c6:	eba6 0807 	sub.w	r8, r6, r7
 80030ca:	608b      	str	r3, [r1, #8]
 80030cc:	f1b8 0f00 	cmp.w	r8, #0
 80030d0:	dde9      	ble.n	80030a6 <__sflush_r+0xae>
 80030d2:	6a21      	ldr	r1, [r4, #32]
 80030d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80030d6:	4643      	mov	r3, r8
 80030d8:	463a      	mov	r2, r7
 80030da:	4628      	mov	r0, r5
 80030dc:	47b0      	blx	r6
 80030de:	2800      	cmp	r0, #0
 80030e0:	dc08      	bgt.n	80030f4 <__sflush_r+0xfc>
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ea:	81a3      	strh	r3, [r4, #12]
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f4:	4407      	add	r7, r0
 80030f6:	eba8 0800 	sub.w	r8, r8, r0
 80030fa:	e7e7      	b.n	80030cc <__sflush_r+0xd4>
 80030fc:	20400001 	.word	0x20400001

08003100 <_fflush_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	690b      	ldr	r3, [r1, #16]
 8003104:	4605      	mov	r5, r0
 8003106:	460c      	mov	r4, r1
 8003108:	b913      	cbnz	r3, 8003110 <_fflush_r+0x10>
 800310a:	2500      	movs	r5, #0
 800310c:	4628      	mov	r0, r5
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	b118      	cbz	r0, 800311a <_fflush_r+0x1a>
 8003112:	6a03      	ldr	r3, [r0, #32]
 8003114:	b90b      	cbnz	r3, 800311a <_fflush_r+0x1a>
 8003116:	f7ff fb39 	bl	800278c <__sinit>
 800311a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f3      	beq.n	800310a <_fflush_r+0xa>
 8003122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003124:	07d0      	lsls	r0, r2, #31
 8003126:	d404      	bmi.n	8003132 <_fflush_r+0x32>
 8003128:	0599      	lsls	r1, r3, #22
 800312a:	d402      	bmi.n	8003132 <_fflush_r+0x32>
 800312c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800312e:	f7ff fc42 	bl	80029b6 <__retarget_lock_acquire_recursive>
 8003132:	4628      	mov	r0, r5
 8003134:	4621      	mov	r1, r4
 8003136:	f7ff ff5f 	bl	8002ff8 <__sflush_r>
 800313a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800313c:	07da      	lsls	r2, r3, #31
 800313e:	4605      	mov	r5, r0
 8003140:	d4e4      	bmi.n	800310c <_fflush_r+0xc>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	059b      	lsls	r3, r3, #22
 8003146:	d4e1      	bmi.n	800310c <_fflush_r+0xc>
 8003148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800314a:	f7ff fc35 	bl	80029b8 <__retarget_lock_release_recursive>
 800314e:	e7dd      	b.n	800310c <_fflush_r+0xc>

08003150 <__swbuf_r>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	460e      	mov	r6, r1
 8003154:	4614      	mov	r4, r2
 8003156:	4605      	mov	r5, r0
 8003158:	b118      	cbz	r0, 8003162 <__swbuf_r+0x12>
 800315a:	6a03      	ldr	r3, [r0, #32]
 800315c:	b90b      	cbnz	r3, 8003162 <__swbuf_r+0x12>
 800315e:	f7ff fb15 	bl	800278c <__sinit>
 8003162:	69a3      	ldr	r3, [r4, #24]
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	071a      	lsls	r2, r3, #28
 800316a:	d501      	bpl.n	8003170 <__swbuf_r+0x20>
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	b943      	cbnz	r3, 8003182 <__swbuf_r+0x32>
 8003170:	4621      	mov	r1, r4
 8003172:	4628      	mov	r0, r5
 8003174:	f000 f82a 	bl	80031cc <__swsetup_r>
 8003178:	b118      	cbz	r0, 8003182 <__swbuf_r+0x32>
 800317a:	f04f 37ff 	mov.w	r7, #4294967295
 800317e:	4638      	mov	r0, r7
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	6922      	ldr	r2, [r4, #16]
 8003186:	1a98      	subs	r0, r3, r2
 8003188:	6963      	ldr	r3, [r4, #20]
 800318a:	b2f6      	uxtb	r6, r6
 800318c:	4283      	cmp	r3, r0
 800318e:	4637      	mov	r7, r6
 8003190:	dc05      	bgt.n	800319e <__swbuf_r+0x4e>
 8003192:	4621      	mov	r1, r4
 8003194:	4628      	mov	r0, r5
 8003196:	f7ff ffb3 	bl	8003100 <_fflush_r>
 800319a:	2800      	cmp	r0, #0
 800319c:	d1ed      	bne.n	800317a <__swbuf_r+0x2a>
 800319e:	68a3      	ldr	r3, [r4, #8]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60a3      	str	r3, [r4, #8]
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	6022      	str	r2, [r4, #0]
 80031aa:	701e      	strb	r6, [r3, #0]
 80031ac:	6962      	ldr	r2, [r4, #20]
 80031ae:	1c43      	adds	r3, r0, #1
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d004      	beq.n	80031be <__swbuf_r+0x6e>
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	07db      	lsls	r3, r3, #31
 80031b8:	d5e1      	bpl.n	800317e <__swbuf_r+0x2e>
 80031ba:	2e0a      	cmp	r6, #10
 80031bc:	d1df      	bne.n	800317e <__swbuf_r+0x2e>
 80031be:	4621      	mov	r1, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	f7ff ff9d 	bl	8003100 <_fflush_r>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d0d9      	beq.n	800317e <__swbuf_r+0x2e>
 80031ca:	e7d6      	b.n	800317a <__swbuf_r+0x2a>

080031cc <__swsetup_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <__swsetup_r+0xa8>)
 80031d0:	4605      	mov	r5, r0
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	460c      	mov	r4, r1
 80031d6:	b118      	cbz	r0, 80031e0 <__swsetup_r+0x14>
 80031d8:	6a03      	ldr	r3, [r0, #32]
 80031da:	b90b      	cbnz	r3, 80031e0 <__swsetup_r+0x14>
 80031dc:	f7ff fad6 	bl	800278c <__sinit>
 80031e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031e4:	0719      	lsls	r1, r3, #28
 80031e6:	d422      	bmi.n	800322e <__swsetup_r+0x62>
 80031e8:	06da      	lsls	r2, r3, #27
 80031ea:	d407      	bmi.n	80031fc <__swsetup_r+0x30>
 80031ec:	2209      	movs	r2, #9
 80031ee:	602a      	str	r2, [r5, #0]
 80031f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	f04f 30ff 	mov.w	r0, #4294967295
 80031fa:	e033      	b.n	8003264 <__swsetup_r+0x98>
 80031fc:	0758      	lsls	r0, r3, #29
 80031fe:	d512      	bpl.n	8003226 <__swsetup_r+0x5a>
 8003200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003202:	b141      	cbz	r1, 8003216 <__swsetup_r+0x4a>
 8003204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003208:	4299      	cmp	r1, r3
 800320a:	d002      	beq.n	8003212 <__swsetup_r+0x46>
 800320c:	4628      	mov	r0, r5
 800320e:	f7ff fbdb 	bl	80029c8 <_free_r>
 8003212:	2300      	movs	r3, #0
 8003214:	6363      	str	r3, [r4, #52]	@ 0x34
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800321c:	81a3      	strh	r3, [r4, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	6063      	str	r3, [r4, #4]
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	b94b      	cbnz	r3, 8003246 <__swsetup_r+0x7a>
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323c:	d003      	beq.n	8003246 <__swsetup_r+0x7a>
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f883 	bl	800334c <__smakebuf_r>
 8003246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800324a:	f013 0201 	ands.w	r2, r3, #1
 800324e:	d00a      	beq.n	8003266 <__swsetup_r+0x9a>
 8003250:	2200      	movs	r2, #0
 8003252:	60a2      	str	r2, [r4, #8]
 8003254:	6962      	ldr	r2, [r4, #20]
 8003256:	4252      	negs	r2, r2
 8003258:	61a2      	str	r2, [r4, #24]
 800325a:	6922      	ldr	r2, [r4, #16]
 800325c:	b942      	cbnz	r2, 8003270 <__swsetup_r+0xa4>
 800325e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003262:	d1c5      	bne.n	80031f0 <__swsetup_r+0x24>
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	0799      	lsls	r1, r3, #30
 8003268:	bf58      	it	pl
 800326a:	6962      	ldrpl	r2, [r4, #20]
 800326c:	60a2      	str	r2, [r4, #8]
 800326e:	e7f4      	b.n	800325a <__swsetup_r+0x8e>
 8003270:	2000      	movs	r0, #0
 8003272:	e7f7      	b.n	8003264 <__swsetup_r+0x98>
 8003274:	20000018 	.word	0x20000018

08003278 <_raise_r>:
 8003278:	291f      	cmp	r1, #31
 800327a:	b538      	push	{r3, r4, r5, lr}
 800327c:	4605      	mov	r5, r0
 800327e:	460c      	mov	r4, r1
 8003280:	d904      	bls.n	800328c <_raise_r+0x14>
 8003282:	2316      	movs	r3, #22
 8003284:	6003      	str	r3, [r0, #0]
 8003286:	f04f 30ff 	mov.w	r0, #4294967295
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800328e:	b112      	cbz	r2, 8003296 <_raise_r+0x1e>
 8003290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003294:	b94b      	cbnz	r3, 80032aa <_raise_r+0x32>
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f830 	bl	80032fc <_getpid_r>
 800329c:	4622      	mov	r2, r4
 800329e:	4601      	mov	r1, r0
 80032a0:	4628      	mov	r0, r5
 80032a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032a6:	f000 b817 	b.w	80032d8 <_kill_r>
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d00a      	beq.n	80032c4 <_raise_r+0x4c>
 80032ae:	1c59      	adds	r1, r3, #1
 80032b0:	d103      	bne.n	80032ba <_raise_r+0x42>
 80032b2:	2316      	movs	r3, #22
 80032b4:	6003      	str	r3, [r0, #0]
 80032b6:	2001      	movs	r0, #1
 80032b8:	e7e7      	b.n	800328a <_raise_r+0x12>
 80032ba:	2100      	movs	r1, #0
 80032bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80032c0:	4620      	mov	r0, r4
 80032c2:	4798      	blx	r3
 80032c4:	2000      	movs	r0, #0
 80032c6:	e7e0      	b.n	800328a <_raise_r+0x12>

080032c8 <raise>:
 80032c8:	4b02      	ldr	r3, [pc, #8]	@ (80032d4 <raise+0xc>)
 80032ca:	4601      	mov	r1, r0
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	f7ff bfd3 	b.w	8003278 <_raise_r>
 80032d2:	bf00      	nop
 80032d4:	20000018 	.word	0x20000018

080032d8 <_kill_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4d07      	ldr	r5, [pc, #28]	@ (80032f8 <_kill_r+0x20>)
 80032dc:	2300      	movs	r3, #0
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	602b      	str	r3, [r5, #0]
 80032e6:	f7fd fc31 	bl	8000b4c <_kill>
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	d102      	bne.n	80032f4 <_kill_r+0x1c>
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	b103      	cbz	r3, 80032f4 <_kill_r+0x1c>
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	bd38      	pop	{r3, r4, r5, pc}
 80032f6:	bf00      	nop
 80032f8:	20000224 	.word	0x20000224

080032fc <_getpid_r>:
 80032fc:	f7fd bc1e 	b.w	8000b3c <_getpid>

08003300 <__swhatbuf_r>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	460c      	mov	r4, r1
 8003304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003308:	2900      	cmp	r1, #0
 800330a:	b096      	sub	sp, #88	@ 0x58
 800330c:	4615      	mov	r5, r2
 800330e:	461e      	mov	r6, r3
 8003310:	da0d      	bge.n	800332e <__swhatbuf_r+0x2e>
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	bf14      	ite	ne
 800331e:	2340      	movne	r3, #64	@ 0x40
 8003320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003324:	2000      	movs	r0, #0
 8003326:	6031      	str	r1, [r6, #0]
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	b016      	add	sp, #88	@ 0x58
 800332c:	bd70      	pop	{r4, r5, r6, pc}
 800332e:	466a      	mov	r2, sp
 8003330:	f000 f848 	bl	80033c4 <_fstat_r>
 8003334:	2800      	cmp	r0, #0
 8003336:	dbec      	blt.n	8003312 <__swhatbuf_r+0x12>
 8003338:	9901      	ldr	r1, [sp, #4]
 800333a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800333e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003342:	4259      	negs	r1, r3
 8003344:	4159      	adcs	r1, r3
 8003346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800334a:	e7eb      	b.n	8003324 <__swhatbuf_r+0x24>

0800334c <__smakebuf_r>:
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003350:	079d      	lsls	r5, r3, #30
 8003352:	4606      	mov	r6, r0
 8003354:	460c      	mov	r4, r1
 8003356:	d507      	bpl.n	8003368 <__smakebuf_r+0x1c>
 8003358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2301      	movs	r3, #1
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	b003      	add	sp, #12
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003368:	ab01      	add	r3, sp, #4
 800336a:	466a      	mov	r2, sp
 800336c:	f7ff ffc8 	bl	8003300 <__swhatbuf_r>
 8003370:	9f00      	ldr	r7, [sp, #0]
 8003372:	4605      	mov	r5, r0
 8003374:	4639      	mov	r1, r7
 8003376:	4630      	mov	r0, r6
 8003378:	f7ff f8f0 	bl	800255c <_malloc_r>
 800337c:	b948      	cbnz	r0, 8003392 <__smakebuf_r+0x46>
 800337e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003382:	059a      	lsls	r2, r3, #22
 8003384:	d4ee      	bmi.n	8003364 <__smakebuf_r+0x18>
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	e7e2      	b.n	8003358 <__smakebuf_r+0xc>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	6020      	str	r0, [r4, #0]
 8003396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800339a:	81a3      	strh	r3, [r4, #12]
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033a2:	b15b      	cbz	r3, 80033bc <__smakebuf_r+0x70>
 80033a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033a8:	4630      	mov	r0, r6
 80033aa:	f000 f81d 	bl	80033e8 <_isatty_r>
 80033ae:	b128      	cbz	r0, 80033bc <__smakebuf_r+0x70>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	431d      	orrs	r5, r3
 80033c0:	81a5      	strh	r5, [r4, #12]
 80033c2:	e7cf      	b.n	8003364 <__smakebuf_r+0x18>

080033c4 <_fstat_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4d07      	ldr	r5, [pc, #28]	@ (80033e4 <_fstat_r+0x20>)
 80033c8:	2300      	movs	r3, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	f7fd fc1b 	bl	8000c0c <_fstat>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	d102      	bne.n	80033e0 <_fstat_r+0x1c>
 80033da:	682b      	ldr	r3, [r5, #0]
 80033dc:	b103      	cbz	r3, 80033e0 <_fstat_r+0x1c>
 80033de:	6023      	str	r3, [r4, #0]
 80033e0:	bd38      	pop	{r3, r4, r5, pc}
 80033e2:	bf00      	nop
 80033e4:	20000224 	.word	0x20000224

080033e8 <_isatty_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4d06      	ldr	r5, [pc, #24]	@ (8003404 <_isatty_r+0x1c>)
 80033ec:	2300      	movs	r3, #0
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	f7fd fc1a 	bl	8000c2c <_isatty>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_isatty_r+0x1a>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_isatty_r+0x1a>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	20000224 	.word	0x20000224

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
